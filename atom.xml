<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kMacro&#39;s blog</title>
  
  <subtitle>Never forget why you started</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zkhdev.github.io/"/>
  <updated>2018-10-14T09:02:02.896Z</updated>
  <id>https://zkhdev.github.io/</id>
  
  <author>
    <name>kMacro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java开发小技巧（六）：使用Apache POI读取Excel</title>
    <link href="https://zkhdev.github.io/2018/10/14/java-dev6/"/>
    <id>https://zkhdev.github.io/2018/10/14/java-dev6/</id>
    <published>2018-10-14T08:55:47.000Z</published>
    <updated>2018-10-14T09:02:02.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5266042-a10bf7fa957b2d3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在数据仓库中，ETL最基础的步骤就是从数据源抽取所需的数据，这里所说的数据源并非仅仅是指数据库，还包括excel、csv、xml等各种类型的数据接口文件，而这些文件中的数据不一定是结构化存储的，比如各种各样的报表文件，往往是一些复杂的表格结构，其中不仅有我们需要的数据，还有一些冗余的、无价值的数据，这时我们就无法直接用一般数据加载工具直接读取入库了。<a id="more"></a>也许你会想，数据源导出文件前先处理好数据就行了。然而，实际开发中数据源往往是多个的，而且涉及到不同的部门甚至公司，这其间难免会出现各种麻烦，甚至有些数据文件还是纯手工处理的，不一定能给到你满意的数据格式。所以我们不讨论谁该负责转换的问题，这里主要介绍如何使用<code>Apache POI</code>来从Excel数据文件中读取我们想要的数据，以及用<code>Bean Validation</code>对数据内容按照预定的规则进行校验。</p><p><strong>文章要点：</strong></p><ul><li>Apache POI是什么</li><li>如何使用Apache POI读取Excel文件</li><li>使用Bean Validation进行数据校验</li><li>Excel读取工具类</li><li>使用实例</li></ul><hr><h1 id="Apache-POI是什么"><a href="#Apache-POI是什么" class="headerlink" title="Apache POI是什么"></a>Apache POI是什么</h1><p><code>Apache POI</code>是用Java编写的免费开源的跨平台的Java API，提供API给Java程式对Microsoft Office格式档案进行读和写的操作。</p><hr><h1 id="如何使用Apache-POI处理Excel文件"><a href="#如何使用Apache-POI处理Excel文件" class="headerlink" title="如何使用Apache POI处理Excel文件"></a>如何使用Apache POI处理Excel文件</h1><h2 id="1、导入Maven依赖"><a href="#1、导入Maven依赖" class="headerlink" title="1、导入Maven依赖"></a>1、导入Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、创建Workbook实例"><a href="#2、创建Workbook实例" class="headerlink" title="2、创建Workbook实例"></a>2、创建Workbook实例</h2><p>这里需要注意的是Excel文档的版本问题，Excel2003及以前版本的文档使用HSSFWorkbook对象，Excel2007及之后版本使用HSSFWorkbook对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Excel2003及以前版本</span></span><br><span class="line">Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line"><span class="comment">// Excel2007及之后版本</span></span><br><span class="line">Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> FileInputStream(path));</span><br></pre></td></tr></table></figure></p><h2 id="3、获取Sheet表格页对象"><a href="#3、获取Sheet表格页对象" class="headerlink" title="3、获取Sheet表格页对象"></a>3、获取Sheet表格页对象</h2><p>Sheet是Excel文档中的工作簿即表格页面，读取前要先找到数据所在页面，可以通过标签名或者索引的方式获取指定Sheet对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按索引获取</span></span><br><span class="line">Sheet sheet = workbook.getSheetAt(index);</span><br><span class="line"><span class="comment">// 按标签名获取</span></span><br><span class="line">Sheet sheet = workbook.getSheet(label);</span><br></pre></td></tr></table></figure></p><h2 id="4、获取Cell单元格对象"><a href="#4、获取Cell单元格对象" class="headerlink" title="4、获取Cell单元格对象"></a>4、获取Cell单元格对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行索引row和列索引col都是以 0 起始</span></span><br><span class="line">Cell cell = sheet.getRow(row).getCell(col);</span><br></pre></td></tr></table></figure><h2 id="5、获取单元格内容"><a href="#5、获取单元格内容" class="headerlink" title="5、获取单元格内容"></a>5、获取单元格内容</h2><p>获取单元格的值之前首先要获知单元格内容的类型，在Excel中单元格有6种类型：</p><ol><li>CELL_TYPE_BLANK ：空值</li><li>CELL_TYPE_BOOLEAN ：布尔型</li><li>CELL_TYPE_ERROR ： 错误</li><li>CELL_TYPE_FORMULA ：公式型</li><li>CELL_TYPE_STRING：字符串型</li><li>CELL_TYPE_NUMERIC：数值型</li></ol><p>各种类型的内容还需要进一步判断其数据格式，例如单元格的Type为CELL_TYPE_NUMERIC时，它有可能是Date类型，在Excel中的Date类型是以Double类型的数字存储的，不同类型的值要调用cell对象相应的方法去获取，具体情况具体分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cell == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (cell.getCellType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> Cell.CELL_TYPE_STRING:</span><br><span class="line">        <span class="keyword">return</span> cell.getRichStringCellValue().getString();</span><br><span class="line">    <span class="keyword">case</span> Cell.CELL_TYPE_NUMERIC:</span><br><span class="line">        <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getDateCellValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getNumericCellValue();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> Cell.CELL_TYPE_BOOLEAN:</span><br><span class="line">        <span class="keyword">return</span> cell.getBooleanCellValue();</span><br><span class="line">    <span class="keyword">case</span> Cell.CELL_TYPE_FORMULA:</span><br><span class="line">        <span class="keyword">return</span> formula.evaluate(cell).getNumberValue();</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、关闭Workbook对象"><a href="#6、关闭Workbook对象" class="headerlink" title="6、关闭Workbook对象"></a>6、关闭Workbook对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workbook.close();</span><br></pre></td></tr></table></figure><hr><h1 id="使用Bean-Validation进行数据校验"><a href="#使用Bean-Validation进行数据校验" class="headerlink" title="使用Bean Validation进行数据校验"></a>使用Bean Validation进行数据校验</h1><p>当你要处理一个业务逻辑时，数据校验是你不得不考虑和面对的事情，程序必须通过某种手段来确保输入进来的数据从语义上来讲是正确的或者符合预定义的格式，一个Java程序一般是分层设计的，而不同的层可能是不同的开发人员来完成，这样就很容易出现不同的层重复进行数据验证逻辑，导致代码冗余等问题。为了避免这样的情况发生，最好是将验证逻辑与相应的模型进行绑定。</p><p><code>Bean Validation</code> 规范的目标就是避免多层验证的重复性，它提供了对 Java EE 和 Java SE 中的 Java Bean 进行验证的方式。该规范主要使用注解的方式来实现对 Java Bean 的验证功能，从而使验证逻辑从业务代码中分离出来。</p><p><code>Hibernate Validator</code> 是 <code>Bean Validation</code> 规范的参考实现，我们可以用它来实现数据验证逻辑，其Maven依赖如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>关于Bean Validation的详细介绍可参考以下文章：<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jsr303/" target="_blank" rel="noopener">JSR 303 - Bean Validation 介绍及最佳实践</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-beanvalid/" target="_blank" rel="noopener">Bean Validation 技术规范特性概述</a></p></blockquote><hr><h1 id="Excel读取工具类"><a href="#Excel读取工具类" class="headerlink" title="Excel读取工具类"></a>Excel读取工具类</h1><p>我们要达到的效果是，模拟<code>游标</code>的方式构建一个Excel读取工具类<code>ExcelReadHelper</code>，然后加载Excel文件流来创建工具类实例，通过这个实例我们可以像游标一样设置当前的行和列，定好位置之后读取出单元格的值并进行校验，完成对Excel文件的读取校验操作。既然是读取还有校验数据，异常处理和提示当然是至关重要的，所以还要有人性化的异常处理方式，方便程序使用者发现Excel中格式或内容有误的地方，具体到哪一行哪一项，出现的问题是什么。</p><h2 id="ExcelReadHelper工具类主体"><a href="#ExcelReadHelper工具类主体" class="headerlink" title="ExcelReadHelper工具类主体"></a><strong>ExcelReadHelper</strong>工具类主体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelReadHelper</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br><span class="line"><span class="comment">//文件绝对路径</span></span><br><span class="line"><span class="keyword">private</span> String excelUrl;</span><br><span class="line"><span class="keyword">private</span> Workbook workbook;</span><br><span class="line"><span class="keyword">private</span> Sheet sheet;</span><br><span class="line"><span class="comment">//Sheet总数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sheetCount;</span><br><span class="line"><span class="comment">//当前行</span></span><br><span class="line"><span class="keyword">private</span> Row row;</span><br><span class="line"><span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelReadHelper</span><span class="params">(File excelFile)</span> <span class="keyword">throws</span> ExcelException </span>&#123;</span><br><span class="line">validator = factory.getValidator();</span><br><span class="line">excelUrl = excelFile.getAbsolutePath();</span><br><span class="line"><span class="comment">//判断工作簿版本</span></span><br><span class="line">String fileName = excelFile.getName();</span><br><span class="line">String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(suffix.equals(<span class="string">".xlsx"</span>)) &#123;</span><br><span class="line">workbook = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(excelFile));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(suffix.equals(<span class="string">".xls"</span>)) &#123;</span><br><span class="line">workbook = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> FileInputStream(excelFile));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcelException(<span class="string">"Malformed excel file"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcelException(excelUrl, e);</span><br><span class="line">&#125;</span><br><span class="line">sheetCount = workbook.getNumberOfSheets();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭工作簿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExcelException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> ExcelException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (workbook != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">workbook.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcelException(excelUrl, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取单元格真实位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> row 行索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> col 列索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [行,列]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCellLoc</span><span class="params">(Integer row, Integer col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">"[%s,%s]"</span>, row + <span class="number">1</span>, CellReference.convertNumToColString(col));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据标签设置Sheet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> labels</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExcelException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSheetByLabel</span><span class="params">(String... labels)</span> <span class="keyword">throws</span> ExcelException </span>&#123;</span><br><span class="line">Sheet sheet = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span>(String label : labels) &#123;</span><br><span class="line">sheet = workbook.getSheet(label);</span><br><span class="line"><span class="keyword">if</span>(sheet != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sheet == <span class="keyword">null</span>) &#123;</span><br><span class="line">StringBuilder sheetStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (String label : labels) &#123;</span><br><span class="line">sheetStr.append(label).append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">sheetStr.deleteCharAt(sheetStr.lastIndexOf(<span class="string">","</span>));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcelException(excelUrl, sheetStr.toString(), <span class="string">"Sheet does not exist"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.sheet = sheet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据索引设置Sheet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExcelException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSheetAt</span><span class="params">(Integer index)</span> <span class="keyword">throws</span> ExcelException </span>&#123;</span><br><span class="line">Sheet sheet = workbook.getSheetAt(index);</span><br><span class="line"><span class="keyword">if</span>(sheet == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcelException(excelUrl, index + <span class="string">""</span>, <span class="string">"Sheet does not exist"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.sheet = sheet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取单元格内容并转为String类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> row 行索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> col 列索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getValueAt</span><span class="params">(Integer row, Integer col)</span> </span>&#123;</span><br><span class="line">Cell cell = sheet.getRow(row).getCell(col);</span><br><span class="line">    String value = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (cell.getCellType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> Cell.CELL_TYPE_STRING:</span><br><span class="line">        value = cell.getStringCellValue() + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Cell.CELL_TYPE_NUMERIC:</span><br><span class="line">        <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">        value = cell.getDateCellValue().getTime() + <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">double</span> num = cell.getNumericCellValue();</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">1</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        value = Double.valueOf(num).intValue() + <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = num + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Cell.CELL_TYPE_FORMULA:</span><br><span class="line">        value = cell.getNumericCellValue() + <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Cell.CELL_TYPE_BOOLEAN:</span><br><span class="line">        value = String.valueOf(cell.getBooleanCellValue()) + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (value == <span class="keyword">null</span> || value.isEmpty()) ? <span class="keyword">null</span> : value.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前行指定列内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> col 列索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">(Integer col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getValueAt(row.getRowNum(), col);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Sheet名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSheetLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String label = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(sheet != <span class="keyword">null</span>) &#123;</span><br><span class="line">label = sheet.getSheetName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 行偏移</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">offsetRow</span><span class="params">(Integer offset)</span> </span>&#123;</span><br><span class="line">Boolean state = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(row == <span class="keyword">null</span>) &#123;</span><br><span class="line">row = sheet.getRow(offset-<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">row = sheet.getRow(row.getRowNum() + offset);</span><br><span class="line"><span class="keyword">if</span>(row == <span class="keyword">null</span>) &#123;</span><br><span class="line">state = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">setRow</span><span class="params">(Integer index)</span> </span>&#123;</span><br><span class="line">row = sheet.getRow(index);</span><br><span class="line"><span class="keyword">return</span> row != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 偏移一行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">nextRow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> offsetRow(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 偏移到下一个Sheet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">nextSheet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Boolean state = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(sheet == <span class="keyword">null</span>) &#123;</span><br><span class="line">sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> index = workbook.getSheetIndex(sheet) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(index &gt;= sheetCount) &#123;</span><br><span class="line">sheet = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sheet = workbook.getSheetAt(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sheet == <span class="keyword">null</span>) &#123;</span><br><span class="line">state = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">row = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据校验</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj 校验对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExcelException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(T obj)</span> <span class="keyword">throws</span> ExcelException </span>&#123;</span><br><span class="line">Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations = validator.validate(obj);</span><br><span class="line"><span class="keyword">if</span>(constraintViolations.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">Iterator&lt;ConstraintViolation&lt;T&gt;&gt; iterable = constraintViolations.iterator();</span><br><span class="line">ConstraintViolation&lt;T&gt; cv = iterable.next();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcelException(excelUrl, sheet.getSheetName(), row.getRowNum() + <span class="number">1</span> + <span class="string">""</span>, </span><br><span class="line">String.format(<span class="string">"%s=%s:%s"</span>, cv.getPropertyPath(), cv.getInvalidValue(), cv.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛出当前Sheet指定行异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> row 异常发生行索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 异常信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExcelException <span class="title">excelRowException</span><span class="params">(Integer row, String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ExcelException(excelUrl, sheet.getSheetName(), row + <span class="number">1</span> + <span class="string">""</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛出当前行异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 异常信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExcelException <span class="title">excelCurRowException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ExcelException(excelUrl, sheet.getSheetName(), row.getRowNum() + <span class="number">1</span> + <span class="string">""</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛出自定义异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 异常信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExcelException <span class="title">excelException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ExcelException(excelUrl, message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ExcelException异常类"><a href="#ExcelException异常类" class="headerlink" title="ExcelException异常类"></a><strong>ExcelException</strong>异常类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelException</span><span class="params">(String url, String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.format(<span class="string">"EXCEL[%s]：%s"</span>, url, message));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelException</span><span class="params">(String url, String sheet, String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.format(<span class="string">"EXCEL[%s],SHEET[%s]：%s"</span>, url, sheet, message));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelException</span><span class="params">(String url, String sheet, String row, String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.format(<span class="string">"EXCEL[%s],SHEET[%s],ROW[%s]：%s"</span>, url, sheet, row, message));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExcelException</span><span class="params">(String url, Throwable cause)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.format(<span class="string">"EXCEL[%s]"</span>, url), cause);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Excel文件对象初始化ExcelReadHelper</span></span><br><span class="line">ExcelReadHelper excel = <span class="keyword">new</span> ExcelReadHelper(file);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 第一页</span></span><br><span class="line">excel.setSheetAt(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// “Sheet1”页</span></span><br><span class="line">excel.setSheetByLabel(<span class="string">"Sheet1"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 下一页</span></span><br><span class="line">excel.nextSheet();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 第一行（以 0 起始）</span></span><br><span class="line">excel.setRow(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 下一行</span></span><br><span class="line">excel.nextRow();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 偏移两行</span></span><br><span class="line">excel.offsetRow(<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 当前行第一列的值</span></span><br><span class="line">String value1 = excel.getValue(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 第一行第一列的值</span></span><br><span class="line">String value2 = excel.getValueAt(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取单元格真实位置（如索引都为0时结果为[1,A]）</span></span><br><span class="line">String location = excel.getCellLoc(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 当前页标题（如“Sheet1”）</span></span><br><span class="line">String label = excel.getSheetLabel();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 校验读取的数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    excel.validate(obj);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExcelException e) &#123;</span><br><span class="line">    <span class="comment">// 错误信息中包含具体错误位置以及原因</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出异常，结果自动包含出现异常的Excel路径</span></span><br><span class="line"><span class="keyword">throw</span> excel.excelException(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出指定行异常，结果自动包含出现错误的Excel路径、当前页位置</span></span><br><span class="line"><span class="keyword">throw</span> excel.excelRowException(<span class="number">0</span>, message);</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出当前行异常，结果自动包含出现错误的Excel路径、当前页、当前行位置</span></span><br><span class="line"><span class="keyword">throw</span> excel.excelCurRowException(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭工作簿Workbook对象</span></span><br><span class="line">excel.close();</span><br></pre></td></tr></table></figure><hr><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2018/10/14/java-dev6/">https://zkhdev.github.io/2018/10/14/java-dev6/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5266042-a10bf7fa957b2d3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在数据仓库中，ETL最基础的步骤就是从数据源抽取所需的数据，这里所说的数据源并非仅仅是指数据库，还包括excel、csv、xml等各种类型的数据接口文件，而这些文件中的数据不一定是结构化存储的，比如各种各样的报表文件，往往是一些复杂的表格结构，其中不仅有我们需要的数据，还有一些冗余的、无价值的数据，这时我们就无法直接用一般数据加载工具直接读取入库了。
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java开发小技巧（五）：HttpClient工具类</title>
    <link href="https://zkhdev.github.io/2018/10/12/java-dev5/"/>
    <id>https://zkhdev.github.io/2018/10/12/java-dev5/</id>
    <published>2018-10-12T02:35:10.000Z</published>
    <updated>2018-10-12T14:55:26.302Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/5266042-878c6a7b7a848210.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大多数Java应用程序都会通过HTTP协议来调用接口访问各种网络资源，JDK也提供了相应的HTTP工具包，但是使用起来不够方便灵活，所以我们可以利用Apache的HttpClient来封装一个具有访问HTTP协议基本功能的高效工具类，为后续开发使用提供方便。<br><a id="more"></a></p><p><strong>文章要点：</strong></p><ul><li>HttpClient使用流程</li><li>工具类封装</li><li>使用实例</li></ul><hr><h1 id="HttpClient使用流程"><a href="#HttpClient使用流程" class="headerlink" title="HttpClient使用流程"></a>HttpClient使用流程</h1><h2 id="1、导入Maven依赖"><a href="#1、导入Maven依赖" class="headerlink" title="1、导入Maven依赖"></a>1、导入Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、创建HttpClient实例"><a href="#2、创建HttpClient实例" class="headerlink" title="2、创建HttpClient实例"></a>2、创建HttpClient实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = HttpClientBuilder.create().build();</span><br></pre></td></tr></table></figure><h2 id="3、创建请求方法的实例"><a href="#3、创建请求方法的实例" class="headerlink" title="3、创建请求方法的实例"></a>3、创建请求方法的实例</h2><p>GET请求使用HttpGet，POST请求使用HttpPost，并传入请求的URL<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST请求</span></span><br><span class="line">HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line"><span class="comment">// GET请求，URL中带请求参数</span></span><br><span class="line">HttpGet get = <span class="keyword">new</span> HttpGet(url);</span><br></pre></td></tr></table></figure></p><h2 id="4、添加请求参数"><a href="#4、添加请求参数" class="headerlink" title="4、添加请求参数"></a>4、添加请求参数</h2><h3 id="普通形式"><a href="#普通形式" class="headerlink" title="普通形式"></a>普通形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;NameValuePair&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"username"</span>, <span class="string">"admin"</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, <span class="string">"123456"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET请求方式</span></span><br><span class="line"><span class="comment">// 由于GET请求的参数是拼装在URL后方，所以需要构建一个完整的URL，再创建HttpGet实例</span></span><br><span class="line">URIBuilder uriBuilder = <span class="keyword">new</span> URIBuilder(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">uriBuilder.setParameters(list);</span><br><span class="line">HttpGet get = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST请求方式</span></span><br><span class="line">post.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(list, Charsets.UTF_8));</span><br></pre></td></tr></table></figure><h3 id="JSON形式"><a href="#JSON形式" class="headerlink" title="JSON形式"></a>JSON形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">map.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String json = gson.toJson(map, <span class="keyword">new</span> TypeToken&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">post.setEntity(<span class="keyword">new</span> StringEntity(json, Charsets.UTF_8));</span><br><span class="line">post.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br></pre></td></tr></table></figure><h2 id="5、发送请求"><a href="#5、发送请求" class="headerlink" title="5、发送请求"></a>5、发送请求</h2><p>调用HttpClient实例的execute方法发送请求，返回一个HttpResponse对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpResponse response = client.execute(post);</span><br></pre></td></tr></table></figure><h2 id="6、获取结果"><a href="#6、获取结果" class="headerlink" title="6、获取结果"></a>6、获取结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String result = EntityUtils.toString(response.getEntity());</span><br></pre></td></tr></table></figure><h2 id="7、释放连接"><a href="#7、释放连接" class="headerlink" title="7、释放连接"></a>7、释放连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post.releaseConnection();</span><br></pre></td></tr></table></figure><hr><h1 id="工具类封装"><a href="#工具类封装" class="headerlink" title="工具类封装"></a>工具类封装</h1><p>HttpClient工具类代码（根据相应使用场景进行封装）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 发送GET请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRequest</span><span class="params">(String path, List&lt;NameValuePair&gt; parametersBody)</span> <span class="keyword">throws</span> RestApiException, URISyntaxException </span>&#123;</span><br><span class="line">        URIBuilder uriBuilder = <span class="keyword">new</span> URIBuilder(path);</span><br><span class="line">        uriBuilder.setParameters(parametersBody);</span><br><span class="line">        HttpGet get = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line">        HttpClient client = HttpClientBuilder.create().build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpResponse response = client.execute(get);</span><br><span class="line">            <span class="keyword">int</span> code = response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (code &gt;= <span class="number">400</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException((<span class="keyword">new</span> StringBuilder()).append(<span class="string">"Could not access protected resource. Server returned http code: "</span>).append(code).toString());</span><br><span class="line">            <span class="keyword">return</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RestApiException(<span class="string">"postRequest -- Client protocol exception!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RestApiException(<span class="string">"postRequest -- IO error!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            get.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送POST请求（普通表单形式）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">postForm</span><span class="params">(String path, List&lt;NameValuePair&gt; parametersBody)</span> <span class="keyword">throws</span> RestApiException </span>&#123;</span><br><span class="line">        HttpEntity entity = <span class="keyword">new</span> UrlEncodedFormEntity(parametersBody, Charsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> postRequest(path, <span class="string">"application/x-www-form-urlencoded"</span>, entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送POST请求（JSON形式）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">postJSON</span><span class="params">(String path, String json)</span> <span class="keyword">throws</span> RestApiException </span>&#123;</span><br><span class="line">        StringEntity entity = <span class="keyword">new</span> StringEntity(json, Charsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> postRequest(path, <span class="string">"application/json"</span>, entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送POST请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">postRequest</span><span class="params">(String path, String mediaType, HttpEntity entity)</span> <span class="keyword">throws</span> RestApiException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"[postRequest] resourceUrl: &#123;&#125;"</span>, path);</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(path);</span><br><span class="line">        post.addHeader(<span class="string">"Content-Type"</span>, mediaType);</span><br><span class="line">        post.addHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">        post.setEntity(entity);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpClient client = HttpClientBuilder.create().build();</span><br><span class="line">            HttpResponse response = client.execute(post);</span><br><span class="line">            <span class="keyword">int</span> code = response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (code &gt;= <span class="number">400</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RestApiException(EntityUtils.toString(response.getEntity()));</span><br><span class="line">            <span class="keyword">return</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RestApiException(<span class="string">"postRequest -- Client protocol exception!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RestApiException(<span class="string">"postRequest -- IO error!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            post.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;NameValuePair&gt; parametersBody = <span class="keyword">new</span> ArrayList();</span><br><span class="line">parametersBody.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"userId"</span>, <span class="string">"admin"</span>));</span><br><span class="line">String result = HttpClientUtil.getRequest(<span class="string">"http://www.test.com/user"</span>,parametersBody);</span><br></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;NameValuePair&gt; parametersBody = <span class="keyword">new</span> ArrayList();</span><br><span class="line">parametersBody.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"username"</span>, <span class="string">"admin"</span>));</span><br><span class="line">parametersBody.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, <span class="string">"123456"</span>));</span><br><span class="line">String result = HttpClientUtil.postForm(<span class="string">"http://www.test.com/login"</span>,parametersBody);</span><br></pre></td></tr></table></figure><h2 id="POST请求（JSON形式）"><a href="#POST请求（JSON形式）" class="headerlink" title="POST请求（JSON形式）"></a>POST请求（JSON形式）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">map.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String json = gson.toJson(map, <span class="keyword">new</span> TypeToken&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">String result = HttpClientUtil.postJSON(<span class="string">"http://www.test.com/login"</span>, json);</span><br></pre></td></tr></table></figure><hr><blockquote><p>关于HttpClient的详细介绍看这里：<a href="https://www.ibm.com/developerworks/cn/opensource/os-httpclient/index.html" target="_blank" rel="noopener">HttpClient入门</a></p><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2018/10/12/java-dev5/">https://zkhdev.github.io/2018/10/12/java-dev5/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5266042-878c6a7b7a848210.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大多数Java应用程序都会通过HTTP协议来调用接口访问各种网络资源，JDK也提供了相应的HTTP工具包，但是使用起来不够方便灵活，所以我们可以利用Apache的HttpClient来封装一个具有访问HTTP协议基本功能的高效工具类，为后续开发使用提供方便。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库（一）：认识数据仓库</title>
    <link href="https://zkhdev.github.io/2018/09/22/dw-begin/"/>
    <id>https://zkhdev.github.io/2018/09/22/dw-begin/</id>
    <published>2018-09-22T13:16:44.000Z</published>
    <updated>2018-10-12T14:56:15.262Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omzy9bjcy.bkt.clouddn.com/%E6%9C%AA%E6%A0%87%E9%A2%98-10.png" alt=""></p><p>刚接触数据仓库是在我的第一份实习工作——数据中心数据管理系统开发，它是一个B/S架构的应用，与一般的项目不同的是，系统是以数据仓库来进行数据存取的，这是我第一次听说数仓这个词，感觉它庞大而且神秘，不知道从何入手，对数据仓库有一种敬畏之心，后来经过慢慢的学习和使用，发现其实它在应用开发中的使用方法跟传统关系数据库没什么区别，无非就是普通的SQL查询以及JDBC连接。所以数仓的使用不是本文的重点，我们主要来认识一下数据仓库到底是什么。<br><a id="more"></a></p><blockquote><p><strong>文章要点</strong></p><ul><li>什么是数据仓库</li><li>数据中心架构</li><li>数据仓库内部架构</li></ul></blockquote><hr><h1 id="什么是数据仓库"><a href="#什么是数据仓库" class="headerlink" title="什么是数据仓库"></a>什么是数据仓库</h1><p>数据仓库（Data Warehouse）是面向主题的、集成的、稳定的、随时间变化的数据集合，用来支持运营管理中的决策制定，为用户提供各种手段从数据中获取有用的信息。它的根本任务是对大量的业务数据进行归纳整理以及重组，然后提供给决策管理人员。</p><p>数据仓库是依赖于数据库进行数据存储和管理的，所以数据库是整个数据仓库的核心。相对于传统数据库来说数仓的数据库最突出的特点是对海量数据的支持和快速的检索技术，最具代表性的是Teradata公司的Teradata数据库。数据仓库平台即数据库和其它各种软件工具整合的一套数据仓库软件。</p><hr><h1 id="数据中心架构"><a href="#数据中心架构" class="headerlink" title="数据中心架构"></a>数据中心架构</h1><p>数据中心的简化架构如下图：</p><p><img src="http://omzy9bjcy.bkt.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="数据中心架构"></p><style>table th:last-of-type { width: 400px;}</style><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>业务系统</td><td>数据仓库的数据来源系统，提供各种所需的业务系统数据，如清算系统、票务系统等业务数据</td></tr><tr><td>数据加载</td><td>通过FTP文件传输或者数据库连接等方式，从业务系统中抽取数据统一存放，并提供给下游应用进行访问</td></tr><tr><td>数据仓库</td><td>数据加载到数据仓库后，通过预先定义的<strong>数据模型</strong>处理数据，并进行存放汇总，包含临时数据、核心模型数据、集市数据和元数据等，提供给下游应用使用</td></tr><tr><td>访问代理</td><td>为下游应用对数据仓库的访问提供负载均衡、灾备系统切换等服务</td></tr><tr><td>数据访问</td><td>各下游应用如统计分析、运营评估、信息管理等应用平台，对数据仓库的数据进行查询获取，可通过导出数据文件或数据库连接等方式进行访问</td></tr><tr><td>ETL管理</td><td>对数据抽取转换加载（ETL）的管理，它是构建数据仓库的重要一环，包括总体控制、作业管理、上下游依赖管理、错误管理、调度监控等所有ETL相关内容的管理</td></tr></tbody></table><hr><h1 id="数据仓库内部架构"><a href="#数据仓库内部架构" class="headerlink" title="数据仓库内部架构"></a>数据仓库内部架构</h1><p>数据仓库的真正关键是数据的存储和管理。数据仓库的组织管理方式决定了它有别于传统数据库，其中一个重要的特点是对数据的分区管理，ETL会根据预先定义的数据模型以及各种数据的用途，来对数仓中的数据进行划分，它的内部架构一般是这样的：</p><p><img src="http://omzy9bjcy.bkt.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%982.png" alt="数据仓库内部架构"></p><table><thead><tr><th>数据区</th><th>数据区名称</th><th>说明</th></tr></thead><tbody><tr><td>STG</td><td>临时区</td><td>存放从源系统抽取的原始数据</td></tr><tr><td>ODS</td><td>操作镜像区</td><td>完成原始数据的增量累全量工作，保留较短历史数据</td></tr><tr><td>PDM</td><td>物理数据模型区</td><td>基于数据模型设计，存放规范化数据，保留较长历史数据</td></tr><tr><td>SUM</td><td>基础数据衍生区</td><td>存放预统计、预汇总数据，提炼出对数据仓库具有共性的数据访问、统计需求，从而构建出的一个面向支持应用系统、数据分析与数据挖掘提供共享的数据访问服务的公共数据区</td></tr><tr><td>APP</td><td>应用集市区</td><td>按照应用系统分别建立，存放为某类特定的业务系统服务的数据集合，根据业务需要的重度汇总数据</td></tr></tbody></table><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2018/09/22/dw-begin/">https://zkhdev.github.io/2018/09/22/dw-begin/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omzy9bjcy.bkt.clouddn.com/%E6%9C%AA%E6%A0%87%E9%A2%98-10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚接触数据仓库是在我的第一份实习工作——数据中心数据管理系统开发，它是一个B/S架构的应用，与一般的项目不同的是，系统是以数据仓库来进行数据存取的，这是我第一次听说数仓这个词，感觉它庞大而且神秘，不知道从何入手，对数据仓库有一种敬畏之心，后来经过慢慢的学习和使用，发现其实它在应用开发中的使用方法跟传统关系数据库没什么区别，无非就是普通的SQL查询以及JDBC连接。所以数仓的使用不是本文的重点，我们主要来认识一下数据仓库到底是什么。&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://zkhdev.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://zkhdev.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="数据仓库" scheme="https://zkhdev.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>vue-router 组件复用问题</title>
    <link href="https://zkhdev.github.io/2018/01/21/vuejs-component-reuse/"/>
    <id>https://zkhdev.github.io/2018/01/21/vuejs-component-reuse/</id>
    <published>2018-01-20T16:44:18.000Z</published>
    <updated>2018-10-12T14:57:28.274Z</updated>
    
    <content type="html"><![CDATA[<p>组件系统是Vue的一个重要组成部分，它可以将一个复杂的页面抽象分解成许多小型、独立、可复用的组件，通过组合组件来组成应用程序，结合<code>vue-router</code>的路由功能将各个组件映射到相应的路由上，通过路由的变化来告诉Vue要在哪里渲染他们，实现各个组件、各个页面之间的跳转导航。<br><a id="more"></a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用<code>vue-router</code>切换路由时会触发组件树的更新，根据定义的路由渲染一个新的组件树，大致的切换过程是这样的：</p><ul><li>停用并移除不需要的组件</li><li>验证切换的可行性</li><li>复用没有进行更新的组件</li><li>启用并激活新的组件</li></ul><blockquote><p>具体路由切换控制流程请参考官方文档：<a href="https://github.com/vuejs/vue-router/blob/1.0/docs/zh-cn/pipeline/README.md" target="_blank" rel="noopener">切换控制流水线</a></p></blockquote><p><strong>那<code>vue-router</code>是怎么判断某一个组件可以复用的呢？</strong> 我们看一下下面这条路由配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'post/:postId'</span>,</span><br><span class="line">    name: <span class="string">'post'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./components/Post.vue'</span>],resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是通过文章ID加载对应文章页面的路由，第一次访问时，<code>Post.vue</code>这个组件会被渲染到组件树中，mounted安装组件时通过文章ID获取文章内容展示到页面上，当我们访问另一篇文章时，路由参数<code>:postId</code>发生改变，按照我们的预期应该会展示新文章的内容，但是事与愿违。</p><p>我们看到的还是之前的文章，虽然路由参数已发生更改，但是<code>vue-router</code>会以为你访问的是<code>Post.vue</code>这个组件，由于之前已经渲染过该组件，所以会直接复用之前的组件，并且<strong>不会</strong>执行组件中的任何操作包括<code>mounted</code>之类的生命周期函数。</p><p>所以我们最终看到的还是原来组件的内容。</p><p><strong>那要怎么才能实现我们期望的效果呢？下面介绍一种有效的解决方法</strong></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>我们可以使用<code>watch</code>侦听器来监听路由的变化情况，根据路由参数的变化来响应相应的数据，具体实现过程是这样的：</p><h2 id="定义数据获取方法"><a href="#定义数据获取方法" class="headerlink" title="定义数据获取方法"></a>定义数据获取方法</h2><p>首先定义一个获取文章的方法，根据文章ID从后台获取对应的文章信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    getPost(postId) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">`/post/get_post/<span class="subst">$&#123;postId&#125;</span>`</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(response.data.code === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.post = response.data.post;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听路由"><a href="#监听路由" class="headerlink" title="监听路由"></a>监听路由</h2><p>接着是在路由切换的时候判断目标组件是否是<code>Post.vue</code>组件，这里可以根据定义的路由名称<code>name</code>实现，如果是，我们就可以从路由信息中获取目标文章ID来更新组件内容。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(to.name === <span class="string">'post'</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.getPost(to.params.postId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="组件初始化"><a href="#组件初始化" class="headerlink" title="组件初始化"></a>组件初始化</h2><p>这里需要注意的是，<strong>当组件首次被挂载到组件树上时，对路由的监听是无效的</strong>，这时我们需要在生命周期钩子<code>mounted</code>对组件进行初始化工作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getPost(<span class="keyword">this</span>.$route.params.postId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>通过上面的方法就可以实现组件内容随路由参数的变化而更新了，有效解决了<code>vue-router</code>组件复用导致路由参数失效的问题。</p><blockquote><p>本文属<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2018/01/21/vuejs-component-reuse/">https://zkhdev.github.io/2018/01/21/vuejs-component-reuse/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件系统是Vue的一个重要组成部分，它可以将一个复杂的页面抽象分解成许多小型、独立、可复用的组件，通过组合组件来组成应用程序，结合&lt;code&gt;vue-router&lt;/code&gt;的路由功能将各个组件映射到相应的路由上，通过路由的变化来告诉Vue要在哪里渲染他们，实现各个组件、各个页面之间的跳转导航。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://zkhdev.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs之开发环境搭建</title>
    <link href="https://zkhdev.github.io/2018/01/06/vuejs-begin/"/>
    <id>https://zkhdev.github.io/2018/01/06/vuejs-begin/</id>
    <published>2018-01-06T14:41:56.000Z</published>
    <updated>2018-10-12T14:57:23.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-3f8686d8901e07ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Vue.js是目前很火的一个前端框架，采用MVVM模式设计，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用，特别适合单页应用的开发。<br><a id="more"></a><br>Vue.js是数据驱动的，它通过一些特殊的语法，将DOM和数据绑定起来，无需手动操作DOM。一旦创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。</p><h1 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h1><p>Vue 提供一个官方命令行工具<code>vue-cli</code>，可用于快速搭建大型单页应用。由于vue-cli是基于nodejs进行工作的，所以安装之前需要确保你的电脑已安装nodejs环境，完成后就可以安装vue-cli工具了：<code>npm i vue-cli -g</code></p><h1 id="快速构建vue应用"><a href="#快速构建vue应用" class="headerlink" title="快速构建vue应用"></a>快速构建vue应用</h1><p>工具安装好后使用命令<code>vue init webpack-simple [应用名称]</code>即可在当前工作目录下创建一个最基本的vue应用，创建过程中会进行相关应用信息的配置，安装结果如图：<br><img src="http://upload-images.jianshu.io/upload_images/5266042-3172f7ba857ea4c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装结果"></p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-7f137919c6d3b998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="应用结构"></p><p>这样一个最基本的vue应用就搭建好了，我们按照提示的命令安装依赖模块并启动，完成后浏览器就会弹出应用主页了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd myvue</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-9793c756340f3869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vuejs应用主页"></p><blockquote><p>安装依赖的过程可能比较慢，可以通过安装淘宝镜像解决：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，之后安装依赖时使用<code>cnpm</code>替代<code>npm</code>即可，如：<code>cnpm install</code></p></blockquote><h1 id="安装-vue-devtools-调试工具"><a href="#安装-vue-devtools-调试工具" class="headerlink" title="安装 vue-devtools 调试工具"></a>安装 vue-devtools 调试工具</h1><p>vue-devtools是一款基于浏览器的vuejs应用的调试工具，支持Chrome、Firefox、Safari浏览器，用于调试vue应用，可以极大地提高我们的调试效率。</p><p>这里以Chrome浏览器为例，介绍vue-devtools的两种安装方式：</p><h2 id="直接从chrome商店安装"><a href="#直接从chrome商店安装" class="headerlink" title="直接从chrome商店安装"></a>直接从chrome商店安装</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">Get the Chrome Extension</a><br>这种最简单的安装方式，但前提你懂的 —- 翻墙</p><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>这种方式稍微麻烦一点，首先我们要将vue-devtools的github项目clone到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue-devtools.git</span><br></pre></td></tr></table></figure></p><p>然后安装相关依赖模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>接着编译项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p>最后安装到Chrome浏览器中，打开浏览器的扩展程序页面<br><img src="http://upload-images.jianshu.io/upload_images/5266042-34c1493a91fa7be0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="扩展程序"></p><p>开启“开发者模式”，点击“加载已解压的扩展程序…”，选择vue-devtools\shells\chrome文件夹即可完成安装</p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-ceb7d2071a2309cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装vue-devtools"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们只需在vue应用页面点击<code>F12</code>快捷键，即可看见vue-devtools工具了<br><img src="http://upload-images.jianshu.io/upload_images/5266042-5ed520833e36f267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-devtools"></p><h1 id="安装-postcss-loader"><a href="#安装-postcss-loader" class="headerlink" title="安装 postcss-loader"></a>安装 postcss-loader</h1><p>使用css来构建页面的样式时，为了考虑浏览器兼容问题，我们会使用兼容性前缀，比较繁琐，通过<code>postcss</code>就可以在编译的时候自动补全css代码的兼容性前缀了，不需要我们手动添加</p><p>首先我们需要安装<code>postcss-loader</code>和<code>autoprefixer</code>模块：<code>npm install postcss-loader autoprefixer -S</code>，接着打开<code>webpack.config.js</code>配置文件，修改以下地方：<br><img src="http://upload-images.jianshu.io/upload_images/5266042-17bced82058bc0ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改webpack.config.js"></p><p>然后我们需要单独创建<code>postcss.config.js</code>配置文件，放在应用根目录下，文件内容：<br><img src="http://upload-images.jianshu.io/upload_images/5266042-43f8c67c7ad69fe7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postcss.config.js"><br>好了，我们看一下配置前后的效果吧</p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-ddff566fbdabe4cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css源码"></p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-d0f2adceecec2ea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postcss配置前"></p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-0d3862228efd1403.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postcss配置后"></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2018/01/06/vuejs-begin/">https://zkhdev.github.io/2018/01/06/vuejs-begin/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-3f8686d8901e07ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vue.js是目前很火的一个前端框架，采用MVVM模式设计，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用，特别适合单页应用的开发。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://zkhdev.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Java开发小技巧（四）：配置文件敏感信息处理</title>
    <link href="https://zkhdev.github.io/2017/12/22/java-dev4/"/>
    <id>https://zkhdev.github.io/2017/12/22/java-dev4/</id>
    <published>2017-12-22T06:04:17.000Z</published>
    <updated>2018-10-12T14:55:29.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-e9660555161d2048.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>AES（高级加密标准）是美国联邦政府采用的一种区块加密标准，其替代原先的DES加密算法，成为对称密钥加密中最流行的算法之一。<br><a id="more"></a><br>不知道在<a href="http://www.jianshu.com/p/3fa98dd52520" target="_blank" rel="noopener">上一篇文章</a>中你有没有发现，<code>jdbc.properties</code>中的数据库密码配置是这样写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc.password=5EF28C5A9A0CE86C2D231A526ED5B388</span><br></pre></td></tr></table></figure></p><p>其实这不是真正的密码，而是经过AES加密的。</p><h1 id="AES的Java实现"><a href="#AES的Java实现" class="headerlink" title="AES的Java实现"></a>AES的Java实现</h1><p>AES加密解密的实现就不具体介绍了，这里直接给出源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.project.monitor.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESEncryption</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"Password"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AESEncryption</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AESEncryption</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyGenerator kgen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">            kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));</span><br><span class="line">            SecretKey secretKey = kgen.generateKey();</span><br><span class="line">            <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">            SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);<span class="comment">// 创建密码器</span></span><br><span class="line">            <span class="keyword">byte</span>[] byteContent = content.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);</span><br><span class="line">            <span class="keyword">return</span> parseByte2HexStr(result); <span class="comment">// 加密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyGenerator kgen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">            kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));</span><br><span class="line">            SecretKey secretKey = kgen.generateKey();</span><br><span class="line">            <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">            SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);<span class="comment">// 创建密码器</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, key);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(parseHexStr2Byte(content));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result); <span class="comment">// 解密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将二进制转换成16进制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">parseByte2HexStr</span><span class="params">(<span class="keyword">byte</span> buf[])</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buf.length; i++) &#123;</span><br><span class="line">            String hex = Integer.toHexString(buf[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hex = <span class="string">'0'</span> + hex;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将16进制转换为二进制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] parseHexStr2Byte(String hexStr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[hexStr.length()/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; hexStr.length()/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> high = Integer.parseInt(hexStr.substring(i*<span class="number">2</span>, i*<span class="number">2</span>+<span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">int</span> low = Integer.parseInt(hexStr.substring(i*<span class="number">2</span>+<span class="number">1</span>, i*<span class="number">2</span>+<span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">            result[i] = (<span class="keyword">byte</span>) (high * <span class="number">16</span> + low);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="解密配置文件"><a href="#解密配置文件" class="headerlink" title="解密配置文件"></a>解密配置文件</h1><p>既然配置文件部分内容已经进行了加密处理，那我们在填充上下文的占位符时就要对其进行解密，获得真正的密码，还记得之前我们在加载配置文件的时候使用的类<code>PropertyPlaceholderConfigurer</code>吗？我们可以通过对它的<code>resolvePlaceholder</code>方法进行重写来实现。</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>首先创建一个继承自<code>PropertyPlaceholderConfigurer</code>的类<code>EncryptPropertyPlaceholderConfigurer</code>，然后重写它的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.project.monitor.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密配置文件敏感内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptPropertyPlaceholderConfigurer</span> <span class="keyword">extends</span> <span class="title">PropertyPlaceholderConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">resolvePlaceholder</span><span class="params">(String placeholder, Properties props)</span> </span>&#123;</span><br><span class="line">        String result = props.getProperty(placeholder);</span><br><span class="line">        <span class="keyword">if</span>(placeholder.endsWith(<span class="string">"jdbc.password"</span>))&#123;</span><br><span class="line">            AESEncryption aes = <span class="keyword">new</span> AESEncryption();</span><br><span class="line">            String decrypt = aes.decrypt(result);</span><br><span class="line">            result = decrypt == <span class="keyword">null</span> ? result : decrypt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着在spring上下文中将原来的bean<code>org.springframework.beans.factory.config.PropertyPlaceholderConfigurer</code>修改为我们创建的类即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.demo.project.monitor.util.EncryptPropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样spring在填充占位符的时候就会进行判断，对加密后的敏感信息进行解密处理，得到真实的内容。</p><p>文章项目源码已发布到Github：<a href="https://github.com/ZKHDEV/MultDependPjo" target="_blank" rel="noopener">https://github.com/ZKHDEV/MultDependPjo</a></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/12/22/java-dev4/">https://zkhdev.github.io/2017/12/22/java-dev4/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-e9660555161d2048.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AES（高级加密标准）是美国联邦政府采用的一种区块加密标准，其替代原先的DES加密算法，成为对称密钥加密中最流行的算法之一。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java开发小技巧（三）：Maven多工程依赖项目</title>
    <link href="https://zkhdev.github.io/2017/12/22/java-dev3/"/>
    <id>https://zkhdev.github.io/2017/12/22/java-dev3/</id>
    <published>2017-12-21T17:10:19.000Z</published>
    <updated>2018-10-12T14:55:32.433Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-26f2758e0f40a631.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Maven多工程依赖项目开发流程"></p><p>本篇文章基于<a href="https://zkhdev.github.io/2017/12/21/java-dev2/">Java开发小技巧（二）：自定义Maven依赖</a>中创建的父工程<code>project-monitor</code>实现，运用我们自定义的依赖包进行多工程依赖项目的开发。<br><a id="more"></a><br>下面以多可执行Jar包项目的开发为例，进行Maven多工程依赖项目开发的讲解。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>首先来看一下封面图，我们要实现的效果是：<br>1.多个项目共享一个项目的类和方法等通用内容<br>2.每个子项目单独导入所需依赖，以及各自填充父项目配置文件中的占位符<br>3.子项目按指定目录结构进行打包<br>4.所有子项目集成打包到一个统一的目录，共享依赖包和配置文件等内容<br>5.打包后目录结构：</p><ul><li>bin：存放脚本文件，用来设置环境变量，执行相应的jar包</li><li>lib：依赖、项目jar包</li><li>etc：配置文件</li><li>……</li></ul><p>好啦，目标明确的，接下来要进行具体开发实现了</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h2><p>在上一篇文章中已经创建好了一个自定义的Maven依赖，相当于一个父项目，接下来我们新建一个子项目，命名为<code>project-one</code>，<code>pom.xml</code>文件与父项目基本相同，所有依赖包都必须单独引入，不同的是多了对父项目的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以及Maven插件<code>maven-assembly-plugin</code>的引入，用来实现依赖的打包以及打包后的目录结构：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>package.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>目录结构配置位于项目根目录下<code>package.xml</code>配置文件中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/assembly-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>package<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>etc<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上就实现了项目打包的配置工作，实现流程图中最后的项目结构，打包结果为zip文件</p><h2 id="填充配置文件占位符"><a href="#填充配置文件占位符" class="headerlink" title="填充配置文件占位符"></a>填充配置文件占位符</h2><p>之前我们在父项目的spring上下文中定义了一个数据源bean，配置信息使用了占位符填充，所以如果我们想要使用这个bean，就需要替换其中的占位符信息，要怎么做呢？<br>首先当然是创建配置文件了，在项目中创建<code>jdbc.properties</code>JDBC配置文件，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localdb:3306/test?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=5EF28C5A9A0CE86C2D231A526ED5B388</span><br></pre></td></tr></table></figure></p><p>然后我们需要借助<code>PropertyPlaceholderConfigurer</code>这个类来实现，在项目spring上下文中定义bean：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Bingo，占位符修改完毕，别忘了引入父项目的上下文，毕竟我们要填充占位符的bean是在父项目中的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath*:project-monitor.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a>测试Demo</h2><p>好了，接下来来测试项目的可行性，主要实现使用父项目定义的数据源来对MySql进行查询。<br>先创建一个<code>DemoService</code>类，内容如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.project.one.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(DemoService.class);</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryDb</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            rs = stmt.executeQuery(<span class="string">"select * from movie limit 1"</span>);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                logger.info(String.format(<span class="string">"Movie[Id=%d,Title=%s,Director=%s,Genre=%s,Language=%s]"</span>,</span><br><span class="line">                        rs.getInt(<span class="number">1</span>),</span><br><span class="line">                        rs.getString(<span class="number">2</span>),</span><br><span class="line">                        rs.getString(<span class="number">3</span>),</span><br><span class="line">                        rs.getString(<span class="number">4</span>),</span><br><span class="line">                        rs.getString(<span class="number">5</span>)</span><br><span class="line">                        ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上下文中为其注入dataSource定义：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.demo.project.one.service.DemoService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>别忘了添加<code>log4j.properties</code>配置文件，这里就不贴出文件内容了。<br>OK，新建一个入口类来执行<code>DemoService</code>的测试吧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.project.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.project.one.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/project-one.xml"</span>);</span><br><span class="line">        DemoService demoService = (DemoService)context.getBean(<span class="string">"demoService"</span>);</span><br><span class="line">        demoService.queryDb();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终的项目结构如图<br><img src="http://upload-images.jianshu.io/upload_images/5266042-716cd2dd327c8992.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>一切准备就绪，轮到项目打包了，在项目根目录执行以下Maven命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></p><p>执行完成后你会发现<code>target</code>目录的结构如图所示<br><img src="http://upload-images.jianshu.io/upload_images/5266042-db36dfa3a95f4a95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="target目录结构"><br>project-one.zip就是我们要的打包结果，解压后你会发现，依赖包和配置文件已经放在了各自的目录下<br><img src="http://upload-images.jianshu.io/upload_images/5266042-c752038e91a13183.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zip包目录结构"></p><h2 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h2><p>项目开发完成，接下来就是执行程序了，以Windows平台下为例，首先创建<code>bin</code>目录，目录中创建批处理文件<code>setenv.bat</code>、<code>project-one.bat</code><br>因为jar包与配置文件的分离，所以我们需要指定执行jar包时的<code>classpath</code>，批处理文件内容如下：</p><h3 id="setenv-bat"><a href="#setenv-bat" class="headerlink" title="setenv.bat"></a>setenv.bat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set SRC_DIR=%cd%</span><br><span class="line"></span><br><span class="line">cd %~dp0</span><br><span class="line">cd ..</span><br><span class="line">set MAIN_HOME=%cd%</span><br><span class="line"></span><br><span class="line">cd %SRC_DIR%</span><br><span class="line"></span><br><span class="line">set BIN_HOME=%MAIN_HOME%\bin</span><br><span class="line">set ETC_HOME=%MAIN_HOME%\etc</span><br><span class="line">set LIB_HOME=%MAIN_HOME%\lib</span><br><span class="line">set CLASSPATH=%ETC_HOME%;%JAVA_HOME%\lib\tools.jar</span><br><span class="line"></span><br><span class="line">for %%i in (%LIB_HOME%\*.jar) do set CLASSPATH=!CLASSPATH!;%%i</span><br></pre></td></tr></table></figure><h3 id="project-one-bat"><a href="#project-one-bat" class="headerlink" title="project-one.bat"></a>project-one.bat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">@setlocal enableextensions enabledelayedexpansion</span><br><span class="line">call setenv.bat</span><br><span class="line"></span><br><span class="line">chcp 65001</span><br><span class="line">java -cp %CLASSPATH% com.demo.project.one.Application</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>bat文件的内容就不详细解释，有兴趣可以百度了解一下，主要是为了拼接出完整的<code>CLASSPATH</code>，执行<code>project-one-0.0.1.jar</code>可执行jar包</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>点击<code>project-one.bat</code>运行程序<br><img src="http://upload-images.jianshu.io/upload_images/5266042-b807746111ff1cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>项目终于开发演示完毕，这里只是创建一个打造可执行jar包的子项目作为例子，你还可以创建多个子项目，最后打包的时候合并相同的依赖和配置文件，然后在<code>bin</code>中创建相应项目的执行文件即可，各个子项目之间也可进行相互依赖。<br>以上开发技巧不仅适用于可执行jar包的开发，同样适用于WEB项目的开发，具体还是由项目需求决定。</p><p>文章项目源码已发布到Github：<a href="https://github.com/ZKHDEV/MultDependPjo" target="_blank" rel="noopener">https://github.com/ZKHDEV/MultDependPjo</a></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/12/22/java-dev3/">https://zkhdev.github.io/2017/12/22/java-dev3/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-26f2758e0f40a631.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Maven多工程依赖项目开发流程&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇文章基于&lt;a href=&quot;https://zkhdev.github.io/2017/12/21/java-dev2/&quot;&gt;Java开发小技巧（二）：自定义Maven依赖&lt;/a&gt;中创建的父工程&lt;code&gt;project-monitor&lt;/code&gt;实现，运用我们自定义的依赖包进行多工程依赖项目的开发。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
      <category term="maven" scheme="https://zkhdev.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java开发小技巧（二）：自定义Maven依赖</title>
    <link href="https://zkhdev.github.io/2017/12/21/java-dev2/"/>
    <id>https://zkhdev.github.io/2017/12/21/java-dev2/</id>
    <published>2017-12-21T07:36:51.000Z</published>
    <updated>2018-10-12T14:55:35.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-346b93b942ca64bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们在项目开发中经常会将一些通用的类、方法等内容进行打包，打造成我们自己的开发工具包，作为各个项目的依赖来使用。<br><a id="more"></a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一般的做法是将项目导出成Jar包，然后在其它项目中将其导入，看起来很轻松，但是存在一个问题，如果你修改了Jar包的内容，岂不是要每个项目都重新导入，这显然是一种很不智能的做法。</p><p>那我们要怎样避免这种“牵一发而动全身”的效果呢？这里给大家介绍一种灵活的解决方法。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="自定义Maven依赖"><a href="#自定义Maven依赖" class="headerlink" title="自定义Maven依赖"></a>自定义Maven依赖</h2><p>Maven是一个项目管理工具，其中一个重要的组成部分就是依赖管理系统，用来解决项目的各种依赖，与传统的导Jar包方式相比，Maven能按照你定义的依赖描述来自动导入Maven本地或远程仓库中各种依赖包，不需要手动的复制粘贴。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>1.首先新建一个基于Maven的Java工程，我们将其命名为“project-monitor”<br>2.导入各种需要的依赖，包括spring的各种依赖，这里还导入了<code>spring-jdbc</code>的依赖包用来进行后面的数据源配置测试，<code>pom.xml</code>文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring end --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j end --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql end --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.定义数据源<code>bean</code>，spring上下文文件<code>project-monitor.xml</code>如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里使用<code>${jdbc.url}</code>这种占位符形式进行配置，子项目使用时再对其进行填充使用<br>4.项目编译打包配置，修改<code>pom.xml</code>文件，添加以下配置节点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>jars<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Title</span>&gt;</span>project-monitor<span class="tag">&lt;/<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Vendor</span>&gt;</span>kMacro<span class="tag">&lt;/<span class="name">Implementation-Vendor</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Build-Time</span>&gt;</span>$&#123;maven.build.timestamp&#125;<span class="tag">&lt;/<span class="name">Build-Time</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>5.执行Maven编译打包命令，在项目根目录（如：D:\project-monitor）下执行以下命令（需配置Maven环境变量）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></p><p>6.将打包后的Jar包安装到本地Maven仓库中，首先定位到jar所在目录（如：D:\project-monitor\target），然后执行命令：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=project-monitor.jar -DgroupId=com.demo -DartifactId=project-monitor -Dversion=0.0.1 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p><p>7.安装完成<br>8.其它工程导入该依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>9.项目修改，只需重新执行5和6的命令即可，子项目不需任何处理</p><blockquote><p><strong>注意：</strong>pom.xml文件并不会被子项目所共享，子项目必须单独导入所有需要的依赖</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>大功告成，一个通用灵活的自定义Maven依赖就开发完成了，这里只是介绍一下Maven依赖包的开发过程，之后会详细介绍如何在子项目中使用安装的依赖包。<br>文章项目源码已发布到Github：<a href="https://github.com/ZKHDEV/MultDependPjo" target="_blank" rel="noopener">https://github.com/ZKHDEV/MultDependPjo</a></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/12/21/java-dev2/">https://zkhdev.github.io/2017/12/21/java-dev2/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-346b93b942ca64bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们在项目开发中经常会将一些通用的类、方法等内容进行打包，打造成我们自己的开发工具包，作为各个项目的依赖来使用。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
      <category term="maven" scheme="https://zkhdev.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java开发小技巧（一）</title>
    <link href="https://zkhdev.github.io/2017/12/19/java-dev1/"/>
    <id>https://zkhdev.github.io/2017/12/19/java-dev1/</id>
    <published>2017-12-19T06:44:40.000Z</published>
    <updated>2018-10-12T14:58:48.580Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-346b93b942ca64bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>最近在看公司项目源码(Java)的时候，发现项目的结构非常清晰，后期维护非常便捷，原因就是运用了很多巧妙的开发技巧，在这里也和大家分享一下，希望对你们有帮助。<br><a id="more"></a><br>相信许多程序员在看别人写的代码的时候，会有怀疑人生的感想，面对一堆天书一样的代码，很难摸清作者的思路，最后选择了重构，如果你认同上面这个作法，说明了两个问题：要么原来的开发者技术菜、要么你技术菜。</p><p>企业级项目的开发不是一个开发人员就能完成的，开发过程中往往会有一些需求变更、人员调动，所以代码的编写规范非常非常重要，你要确保项目交接后，后续开发人员可以看懂你的东西，知道如何进行后期的维护和功能迭代。</p><h1 id="1-IP地址变量化"><a href="#1-IP地址变量化" class="headerlink" title="1.IP地址变量化"></a>1.IP地址变量化</h1><p>相信大家在连接数据库的时候是这样写的：</p><blockquote><p>jdbc:mysql://127.0.0.1:3306/test</p></blockquote><p>这是连接本地MySql数据库的字符串，这句话看起来没有问题，但是大多数企业项目会把数据库独立出来，使用数据库一体机或远程数据库，这时候就需要修改上面的IP了，如果项目少这样写没什么问题，但是如果项目多了，岂不是每个项目都要去修改，这样显得非常不智能，所以解决方案来了：</p><h2 id="使用hosts文件使IP地址变量化"><a href="#使用hosts文件使IP地址变量化" class="headerlink" title="使用hosts文件使IP地址变量化"></a>使用hosts文件使IP地址变量化</h2><p>首先介绍一下hosts文件，它的作用就是将一些网址域名与其对应的IP地址建立一个关联，相当于本地的DNS域名解析器，当用户访问一个网址时，系统会首先从hosts文件中寻找对应的IP地址，一旦找到，系统会立即访问对应的IP，如果没有找到，则系统再会将网址提交DNS域名解析服务器进行IP地址的解析。</p><blockquote><p>Windows中hosts文件位于<code>C:\Windows\System32\drivers\etc\hosts</code>，Linux中位于<code>/etc/hosts</code></p></blockquote><p>现在我们把数据库连接字符串改成这样子：</p><blockquote><p>jdbc:mysql://mydb:3306/test</p></blockquote><p>与之前的不同之处在于，将<code>127.0.0.1</code>的IP地址改成了变量名<code>mydb</code></p><p>接着我们来修改hosts文件，打开hosts文件其实你可以看到，平时我们使用的<code>localhost</code>其实是默认解析到IP<code>127.0.0.1</code>上的，我们可以在文件最下面添加这样一行配置：</p><blockquote><p>127.0.0.1 mydb</p></blockquote><p>大功告成，运行项目你会发现一切正常，这就是将IP地址变量化的方法，如果之后公司要求将数据库迁移到其它地方，只需修改一下服务器的hosts文件即可，服务器上面所有的项目就能正常连接数据库了，是不是很方便呢</p><h1 id="2-配置文件式开发"><a href="#2-配置文件式开发" class="headerlink" title="2.配置文件式开发"></a>2.配置文件式开发</h1><p>在我们的开发中经常会有一些需要预先定义好的变量或者常量，比如数据库连接配置、Sql语句等等，如果把它们写死在代码里面，会显得很不灵活，因为Java是一种编译型开发语言，修改代码需要重新编译和部署，于是我们可以使用这种方法——将变量存放到配置文件中。</p><p>这样如果我们修改了变量内容，也不需要重新编译，像Spring、Mybatis等大多是Java框架都是利用这种方式来工作的。</p><p>下面举一个简单的例子：</p><p>首先我们新建一个<code>config.properties</code>的配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.driver=com.mysql.jdbc.Driver</span><br><span class="line">db.url=jdbc:mysql://mydb:3306/test?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC</span><br><span class="line">db.username=root</span><br><span class="line">db.password=toor</span><br></pre></td></tr></table></figure></p><p>这是一个简单的数据库连接配置文件，然后我们在代码中加载这个文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"config.properties"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file.exists() &amp;&amp; file.isDirectory())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"缺少配置文件config.properties"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(in, <span class="string">"UTF-8"</span>);  <span class="comment">//解决文件编码问题</span></span><br><span class="line">prop.load(reader);  <span class="comment">//加载配置内容到prop对象中</span></span><br></pre></td></tr></table></figure></p><p>这样我们就可以通过Properties提供的方法来获取相应的配置了，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = prop.getProperty(<span class="string">"db.url"</span>);</span><br></pre></td></tr></table></figure></p><p>加载配置文件还有一种方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = getClass().getResourceAsStream(<span class="string">"config.properties"</span>);</span><br><span class="line">prop.load(in);</span><br></pre></td></tr></table></figure></p><p>这是通过classpath来获取配置文件，但是要求配置文件必须放在classpath中，而且需要注意的是，如果你将项目打包成jar包，配置文件也会被一起打包，没办法对文件进行修改了。</p><p>使用<code>Properties prop = System.getProperties();</code>还可以获取JVM的一些配置，比如系统换行符等信息，在读取解析本地文件内容时是很有用：<code>System.getProperty(&quot;line.separator&quot;)</code></p><h1 id="3-其它技巧"><a href="#3-其它技巧" class="headerlink" title="3.其它技巧"></a>3.其它技巧</h1><p>(1) 使用<code>System.getProperty(&quot;line.separator&quot;)</code>获取系统换行符，Windows上为<code>\r\n</code>，Linux为<code>\n</code><br>(2) 避免使用硬编码，使用常量存放固定值，且常量名全部大写，如：<code>private static final VALUE = &quot;123&quot;;</code><br>(3) 使用<code>&quot;123&quot;.equals(value)</code>方式进行等值判断，而不用<code>value.equals(&quot;123&quot;)</code>，防止value为Null出现<code>NullPointerException</code><br>(4) 多字符串拼接时，使用<code>StringBuffer</code>（线程安全）或<code>StringBuilder</code>（非线程安全）代替<code>str1 + str2</code>的情况<br>(5) 使用<code>obj.valueOf()</code>的方式转换基本类型，避免使用强制转换<br>(6) 使用<code>return result.size() &gt; 0</code>的方式优化<code>if</code>条件判断<br>(7) 使用静态代码块初始化静态成员<br>(8) 使用整型处理金融数据，将浮点值转为整型进行计算，避免浮点值的精度偏差<br>(9) 使用<code>Collection</code>类型时，采用<code>Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</code>或<code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();</code>的标准形式，不要省略两边的泛型定义<br>(10)    使用分隔符拼接字符串时，用<code>str = str.substring(0, str.lastIndexOf(&quot;,&quot;));</code>的方式删除末尾多余的分隔符</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>今天先写到这吧，下一篇文章将给大家分享一个很实用的方法：利用Maven打造一个通用的工程，可以把一些通用的配置信息、类、方法进行统一管理，并且为其它工程提供服务，敬请期待哟</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/12/19/java-dev1/">https://zkhdev.github.io/2017/12/19/java-dev1/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-346b93b942ca64bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在看公司项目源码(Java)的时候，发现项目的结构非常清晰，后期维护非常便捷，原因就是运用了很多巧妙的开发技巧，在这里也和大家分享一下，希望对你们有帮助。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java实现CORS跨域请求</title>
    <link href="https://zkhdev.github.io/2017/09/22/java-cors/"/>
    <id>https://zkhdev.github.io/2017/09/22/java-cors/</id>
    <published>2017-09-22T12:31:45.000Z</published>
    <updated>2018-10-12T14:55:45.768Z</updated>
    
    <content type="html"><![CDATA[<p>使用前后端分离模式开发项目时，往往会遇到这样一个问题 – 无法跨域获取服务端数据，这是由于浏览器的同源策略导致的，目的是为了安全。在前后端分离开发模式备受青睐的今天，前端和后台项目往往会在不同的环境下进行开发，这时就会出现跨域请求数据的需求。<br><a id="more"></a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>目前的解决方案主要有以下几种：</p><blockquote><p>JSONP、iframe、代理模式、CORS等等</p></blockquote><p>前面几种方式在这里不讲，网上有很多资料。在这里我主要分享一下CORS这种解决方式，CORS即“跨域资源共享”，它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p><p>使用 CORS 跨域的时候和普通的 ajax 过程是一样的，只是浏览器在发现这是一个跨域请求的时候会自动帮我们处理一些事情，所以说<strong>只要服务端提供支持，前端是不需要做额外的事情的</strong>。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现的大概思路是这样的，首先使用过滤器获取请求对象request的信息，比如Origin 字段（表示请求来自哪个源，包括协议、域名、端口），通过预先配置的参数判断请求是否合法，然后设置响应对象response的头信息，实现跨域资源请求。在介绍实现方式之前我们先来了解一下会用到的响应头信息。</p><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul><li><p>Access-Control-Allow-Methods<br>用来列出浏览器的CORS请求允许使用的HTTP方法，如：GET、POST、PUT、DELETE、OPTIONS</p></li><li><p>Access-Control-Allow-Credentials<br>表示是否支持跨域Cookie</p></li><li><p>Access-Control-Allow-Headers<br>逗号分隔的字符串，表示服务器支持的所有头信息字段，如Content-Type以及自定义的字段</p></li><li><p>Access-Control-Expose-Headers<br>与“Access-Control-Allow-Headers”相反，表示不支持的头信息字段</p></li><li><p>Access-Control-Allow-Origin<br>允许跨域的请求源信息，包括协议、域名、端口，为<code>*</code>表示允许所有请求来源，并且<strong>只能设置一个请求源</strong></p></li></ul><p>下面介绍一下Java后台如何实现这种方式。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>由于最近在使用spring-boot，所以接下来以spring-boot为基础来实现。</p><p>首先创建一个CorsFilter过滤器，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"corsFilter"</span>, urlPatterns = <span class="string">"/*"</span>,</span><br><span class="line">        initParams = &#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"allowOrigin"</span>, value = <span class="string">"*"</span>),</span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"allowMethods"</span>, value = <span class="string">"GET,POST,PUT,DELETE,OPTIONS"</span>),</span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"allowCredentials"</span>, value = <span class="string">"true"</span>),</span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"allowHeaders"</span>, value = <span class="string">"Content-Type,X-Token"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String allowOrigin;</span><br><span class="line">    <span class="keyword">private</span> String allowMethods;</span><br><span class="line">    <span class="keyword">private</span> String allowCredentials;</span><br><span class="line">    <span class="keyword">private</span> String allowHeaders;</span><br><span class="line">    <span class="keyword">private</span> String exposeHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        allowOrigin = filterConfig.getInitParameter(<span class="string">"allowOrigin"</span>);</span><br><span class="line">        allowMethods = filterConfig.getInitParameter(<span class="string">"allowMethods"</span>);</span><br><span class="line">        allowCredentials = filterConfig.getInitParameter(<span class="string">"allowCredentials"</span>);</span><br><span class="line">        allowHeaders = filterConfig.getInitParameter(<span class="string">"allowHeaders"</span>);</span><br><span class="line">        exposeHeaders = filterConfig.getInitParameter(<span class="string">"exposeHeaders"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowOrigin)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(allowOrigin.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">                response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, allowOrigin);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                List&lt;String&gt; allowOriginList = Arrays.asList(allowOrigin.split(<span class="string">","</span>));</span><br><span class="line">                <span class="keyword">if</span> (allowOriginList != <span class="keyword">null</span> &amp;&amp; allowOriginList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    String currentOrigin = request.getHeader(<span class="string">"Origin"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (allowOriginList.contains(currentOrigin)) &#123;</span><br><span class="line">                        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, currentOrigin);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowMethods)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, allowMethods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowCredentials)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, allowCredentials);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(allowHeaders)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, allowHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(exposeHeaders)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Expose-Headers"</span>, exposeHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大功告成，现在前端就可以跨域获取后台的数据了，比其它方式容易得多，代码就不解释了，简单易懂，使用其它后台开发方式也一样，最终目的就是<strong>判断请求，设置响应头</strong>，前端什么事都不用做。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/09/22/java-cors/">https://zkhdev.github.io/2017/09/22/java-cors/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用前后端分离模式开发项目时，往往会遇到这样一个问题 – 无法跨域获取服务端数据，这是由于浏览器的同源策略导致的，目的是为了安全。在前后端分离开发模式备受青睐的今天，前端和后台项目往往会在不同的环境下进行开发，这时就会出现跨域请求数据的需求。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>数据库记录删除方式</title>
    <link href="https://zkhdev.github.io/2017/09/04/db-delete/"/>
    <id>https://zkhdev.github.io/2017/09/04/db-delete/</id>
    <published>2017-09-04T07:59:38.000Z</published>
    <updated>2018-10-12T14:56:11.401Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-a6b175382e0b6b78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>删除数据库记录是一个非常常见的需求，当数据失去价值时，我们便会删除它，但是如果操作不当，往往就会把一些有价值的数据误删掉，造成重要数据的丢失，合理采用删除方式才能更好地利用数据资源，下面介绍几种常用的删除方式。<br><a id="more"></a></p><h1 id="删除方式"><a href="#删除方式" class="headerlink" title="删除方式"></a>删除方式</h1><h2 id="物理删除"><a href="#物理删除" class="headerlink" title="物理删除"></a>物理删除</h2><p>物理删除就是直接从数据库中删除一条或多条记录，将数据从磁盘上擦除，可以使用<code>DELETE FROM</code>SQL语句实现，这种方式产生的后果就是记录永久性删除，无法找回，一般适用于小型或数据重要性不高的项目，可以提高数据库资源利用率。物理删除方式是一种最简单最基本的数据删除方式，这里不多做介绍，我们主要来看一下逻辑删除方式。</p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>所谓的逻辑删除就是实现记录已删除的效果，但实际上数据仍然存在于数据库中，只是对用户隐藏这一部分数据。一些大型的、数据关联性高、数据重要性高的应用往往会采用这种删除方式，它可以实现回收站、删除恢复、查看历史版本等实用功能，根据业务的需要有不同的应用场景。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>例如，在一些邮箱应用中，当你删除一条邮件时，不会将邮件直接删除，而是把邮件移动到回收站，你可以在回收站中对邮件进行恢复、彻底删除等操作，可以有效防止误删等情况。<br>再比如博客管理平台一般都会提供查看修改历史、比较历史版本等功能，我们可以方便地查看文章的修改历史，以及恢复到之前某一版本。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="标记删除"><a href="#标记删除" class="headerlink" title="标记删除"></a>标记删除</h3><p>采用删除标记的方式可以很容易地实现逻辑删除功能，通过在表中添加一个删除标记字段，将正常记录的该字段设置为0，已删除记录的该字段设置为1，查询时添加一个<code>where</code>条件筛选删除标记为0的记录，就可以实现逻辑删除的功能，此时的删除业务只需要将记录的删除标记字段修改为1即可。</p><h3 id="拉链"><a href="#拉链" class="headerlink" title="拉链"></a>拉链</h3><p>拉链方式来源于数据仓库，是针对数据仓库设计中表存储数据的方式而定义的，所谓拉链，就是记录历史，记录一个事物从开始到当前状态的所有变化信息。拉链算法是目前数据仓库领域最典型的算法之一。<br>这种方式的表结构与普通表的区别在于多了两个字段（<code>START_DATE</code>&amp;<code>END_DATE</code>）表示记录的有效时间，分别为记录添加时间和记录最大有效时间。</p><ul><li><p>数据表采用联合主键的方式，使用<code>id</code>和<code>START_DATE</code>来唯一的表示某条记录，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table_name`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`start_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`end_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    ...,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">`id`</span>,<span class="string">`start_date`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=MYISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li><li><p>新增记录时<code>START_DATE</code>可设置为当前时间，<code>END_DATE</code>设置为null或未来某个时间来表示无穷大，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name(start_date,end_date,...) <span class="keyword">values</span>(当前时间,一百年后,...);</span><br></pre></td></tr></table></figure></li><li><p>查询数据时只要对日期进行筛选就可得到当前有效的记录，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">id</span>=记录<span class="keyword">ID</span> <span class="keyword">and</span> start_date&lt;=当前时间 <span class="keyword">and</span> end_date&gt;当前时间;</span><br></pre></td></tr></table></figure></li><li><p>修改记录的方式与传统方式不同，修改操作并不是直接修改数据库中的某条记录，而是把修改的原有效记录的<code>END_DATE</code>设置为当前时间,接下来新增一条完整的、修改后的记录，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> end_date=当前时间 <span class="keyword">where</span> <span class="keyword">id</span>=原记录<span class="keyword">ID</span> <span class="keyword">and</span> end_date=一百年后;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name(<span class="keyword">id</span>,start_date,end_date,...) <span class="keyword">values</span>(原记录<span class="keyword">ID</span>,当前时间,一百年后,...);</span><br></pre></td></tr></table></figure></li><li><p>删除操作很简单，不是真的将记录从数据表中移除，只需把记录的<code>END_DATE</code>设置为当前时间即可，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> end_date=当前时间 <span class="keyword">where</span> <span class="keyword">id</span>=删除记录<span class="keyword">ID</span>;</span><br></pre></td></tr></table></figure></li><li><p>通过这种方式可以完整地记录下数据的变化情况，使用下面的查询语句就可以获取某条记录的完整版本列表以及查看特定版本的内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取版本列表</span></span><br><span class="line"><span class="keyword">select</span> start_date <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">id</span>=记录<span class="keyword">ID</span> <span class="keyword">order</span> <span class="keyword">by</span> start_date;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看特定版本内容</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">id</span>=记录<span class="keyword">ID</span> <span class="keyword">and</span> start_date=版本日期;</span><br></pre></td></tr></table></figure></li></ul><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>不同的业务需要根据其应用场景来选择合适的数据删除方式，一般的应用可以采用物理删除的方式，简单粗暴地将数据擦除，这样可以有效提高数据库地利用率，如果历史数据一点价值都没有或者价值不高，那还留着干什么，这时如果采用逻辑删除地方式反而加重了数据库的负担，浪费了大量宝贵的资源。但是有些项目如金融、交通、能源等领域的历史数据，往往具有很高的利用价值，通过对这些数据进行分析总结，可以更好的了解该领域的发展情况和健康程度，以及对未来的发展规划起到一定指导作用，这时就要采用逻辑删除的方式，虽然数据管理平台为了便于管理，删除了过期的数据，但数据分析系统仍能从数据库中获取到历史数据，通过抽取转换加载的过程，将历史数据转化为高价值的内容，这是目前信息技术发展的主要趋势。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/09/04/db-delete/">https://zkhdev.github.io/2017/09/04/db-delete/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-a6b175382e0b6b78.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;删除数据库记录是一个非常常见的需求，当数据失去价值时，我们便会删除它，但是如果操作不当，往往就会把一些有价值的数据误删掉，造成重要数据的丢失，合理采用删除方式才能更好地利用数据资源，下面介绍几种常用的删除方式。&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://zkhdev.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://zkhdev.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="数据库" scheme="https://zkhdev.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://zkhdev.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式（三） 数据访问对象模式</title>
    <link href="https://zkhdev.github.io/2017/07/31/js-dao/"/>
    <id>https://zkhdev.github.io/2017/07/31/js-dao/</id>
    <published>2017-07-30T17:42:44.000Z</published>
    <updated>2018-10-12T14:56:48.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p><p>HTML5提供了两种在客户端存储数据的新方法：localStorage、sessionStorage，他们是Web Storage API 提供的两种存储机制，区别在于前者属于永久性存储，而后者是局限于当前窗口的数据传递，存储在其中的数据会在当前会话结束时被删除。<br><a id="more"></a><br>localStorage、sessionStorage的具体内容在这里就不多做介绍了，我们主要探讨一下在实际开发中怎样合理使用他们。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>大部分网站会将一些数据（如：用户Token）存储在前端，用来实现页面间的传值，对于一些大型Web应用来说，其存储的数据可能会非常多，数据的管理会变得复杂，并且一个大型项目是由多位程序员共同开发的，这时就会遇到一个问题：怎样确保自己的数据不会覆盖掉其他人的呢？因为在一个页面中大家都是使用同一个WebStorage对象，总不能把大家使用过的Key记录下来吧。这时候就可以使用<strong>数据访问对象模式</strong>来解决了。</p><h1 id="数据访问对象模式（DAO）"><a href="#数据访问对象模式（DAO）" class="headerlink" title="数据访问对象模式（DAO）"></a>数据访问对象模式（DAO）</h1><p>数据访问对象模式就是对数据源的访问与存储进行封装，提供一个数据访问对象类负责对存储的数据进行管理和操作，规范数据存储格式，类似于后台的DAO层。<br>由于WebStorage采用Key-Value的方式存取数据，而且只能存字符串（任何类型存储的时候都会被转为字符串，读取的时候需要进行类型转换），所以我们可以对Key的格式进行规范，比如模块名+Key，开发人员+Key等，还可以在值中添加一段前缀用来描述数据，如添加数据过期日期的时间戳，用来管理数据的生命周期。具体格式项目组可以自己定义，主要是便于管理，防止出现冲突，约定好规范后就可以开始定义数据访问对象了。</p><p>下面以localStorage为例，介绍一下数据访问对象类的定义和使用。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="DAO类基本结构"><a href="#DAO类基本结构" class="headerlink" title="DAO类基本结构"></a>DAO类基本结构</h3><p>数据访问对象类的基本结构如下，我们给键值添加了一段前缀用来避免键值冲突，并且在值中加入数据过期时间戳以及分隔符，获取值的时候再进行判断是否过期，这样可以更灵活地管理存储数据的生命周期。这里还用到了回调的方式，方便获取数据访问过程的具体结果，以及在必要时执行相关操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LocalStorage数据访问类</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; prefix Key前缀</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; timeSplit 时间戳与存储数据之间的分割符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Dao = <span class="function"><span class="keyword">function</span> (<span class="params">prefix, timeSplit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    <span class="keyword">this</span>.timeSplit = timeSplit || <span class="string">'|-|'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// LocalStorage数据访问类原型方法</span></span><br><span class="line">Dao.prototype = &#123;</span><br><span class="line">    <span class="comment">// 操作状态</span></span><br><span class="line">    status: &#123;</span><br><span class="line">        SUCCESS: <span class="number">0</span>,     <span class="comment">// 成功</span></span><br><span class="line">        FAILURE: <span class="number">1</span>,     <span class="comment">// 失败</span></span><br><span class="line">        OVERFLOW: <span class="number">2</span>,    <span class="comment">// 溢出</span></span><br><span class="line">        TIMEOUT: <span class="number">3</span>      <span class="comment">// 过期</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 本地存储对象</span></span><br><span class="line">    storage: localStorage || <span class="built_in">window</span>.localStorage,</span><br><span class="line">    <span class="comment">// 获取带前缀的真实键值</span></span><br><span class="line">    getKey: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.prefix + key;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 添加（修改）数据</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">key, value, callback, time</span>) </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span> (<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加（修改）数据"><a href="#添加（修改）数据" class="headerlink" title="添加（修改）数据"></a>添加（修改）数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加（修改）数据</span></span><br><span class="line"><span class="comment">    * @param key 数据字段标识</span></span><br><span class="line"><span class="comment">    * @param value 数据值</span></span><br><span class="line"><span class="comment">    * @param callback 回调函数</span></span><br><span class="line"><span class="comment">    * @param time 过期时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">key, value, callback, time</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 默认为成功状态</span></span><br><span class="line">        <span class="keyword">var</span> status = <span class="keyword">this</span>.status.SUCCESS,</span><br><span class="line">            key = <span class="keyword">this</span>.getKey(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取过期时间戳</span></span><br><span class="line">            time = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() || time.getTime();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 未设置过期时间时默认为一个月</span></span><br><span class="line">            time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 向本地存储中添加（修改）数据</span></span><br><span class="line">            <span class="keyword">this</span>.storage.setItem(key, time + <span class="keyword">this</span>.timeSplit + value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 发生溢出</span></span><br><span class="line">            status = <span class="keyword">this</span>.status.OVERFLOW;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行回调并传入参数</span></span><br><span class="line">        callback &amp;&amp; callback.call(<span class="keyword">this</span>, status, key, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取数据</span></span><br><span class="line"><span class="comment">    * @param key 数据字段标识</span></span><br><span class="line"><span class="comment">    * @param callback 回调函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="keyword">this</span>.getKey(key),</span><br><span class="line">            status = <span class="keyword">this</span>.status.SUCCESS,    <span class="comment">// 获取数据状态</span></span><br><span class="line">            value = <span class="literal">null</span>;    <span class="comment">// 获取数据值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从本地存储获取数据</span></span><br><span class="line">            value = <span class="keyword">this</span>.storage.getItem(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 获取数据失败</span></span><br><span class="line">            status = <span class="keyword">this</span>.status.FAILURE;</span><br><span class="line">            value = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果成功获取数据</span></span><br><span class="line">        <span class="keyword">if</span> (status !== <span class="keyword">this</span>.status.FAILURE) &#123;</span><br><span class="line">            <span class="keyword">var</span> index = value.indexOf(<span class="keyword">this</span>.timeSplit),</span><br><span class="line">                timeSplitLen = <span class="keyword">this</span>.timeSplit.length,</span><br><span class="line">                <span class="comment">// 获取时间戳</span></span><br><span class="line">                time = value.slice(<span class="number">0</span>, index);</span><br><span class="line">            <span class="comment">// 判断数据是否未过期</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1</span>*time).getTime() &gt; <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() || time == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取数据值</span></span><br><span class="line">                value = value.slice(index + timeSplitLen);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 数据已过期，删除数据</span></span><br><span class="line">                value = <span class="literal">null</span>;</span><br><span class="line">                status = <span class="keyword">this</span>.status.TIMEOUT;</span><br><span class="line">                <span class="keyword">this</span>.remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行回调</span></span><br><span class="line">        callback &amp;&amp; callback.call(<span class="keyword">this</span>, status, value);</span><br><span class="line">        <span class="comment">// 返回结果值</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除数据</span></span><br><span class="line"><span class="comment">    * @param key 数据字段标识</span></span><br><span class="line"><span class="comment">    * @param callback 回调函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span> (<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 设置默认状态为失败</span></span><br><span class="line">        <span class="keyword">var</span> status = <span class="keyword">this</span>.status.FAILURE,</span><br><span class="line">            key = <span class="keyword">this</span>.getKey(key),</span><br><span class="line">            value = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据值</span></span><br><span class="line">            value = <span class="keyword">this</span>.storage.getItem(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 数据不存在，不采取操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果数据存在</span></span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 删除数据</span></span><br><span class="line">                <span class="keyword">this</span>.storage.removeItem(key);</span><br><span class="line">                status = <span class="keyword">this</span>.status.SUCCESS;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="comment">// 数据删除失败，不采取操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行回调并传入参数，删除成功则传入被删除的数据值</span></span><br><span class="line">        callback &amp;&amp; callback.call(<span class="keyword">this</span>, status, status &gt; <span class="number">0</span> ? <span class="literal">null</span> : value.slice(value.indexOf(<span class="keyword">this</span>.timeSplit) + <span class="keyword">this</span>.timeSplit.length));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dao = <span class="keyword">new</span> Dao(<span class="string">'myModule_'</span>);</span><br><span class="line"><span class="comment">// 添加/修改数据</span></span><br><span class="line">dao.set(<span class="string">'token'</span>, <span class="string">'abc'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); &#125;);</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="keyword">var</span> value = dao.get(<span class="string">'token'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">dao.remove(<span class="string">'token'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); &#125;);</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实数据访问对象模式更适合与服务器端的数据库操作，比如在nodejs中操作MongoDB，通过对数据库增删改查操作的封装，可以方便我们对前端存储的管理，不必为操作数据库感到烦恼，DAO已经为我们提供了便捷统一的接口，这样在团队开发中就不用担心影响到其他人的数据了。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/07/31/js-dao/">https://zkhdev.github.io/2017/07/31/js-dao/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;HTML5提供了两种在客户端存储数据的新方法：localStorage、sessionStorage，他们是Web Storage API 提供的两种存储机制，区别在于前者属于永久性存储，而后者是局限于当前窗口的数据传递，存储在其中的数据会在当前会话结束时被删除。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
      <category term="设计模式" scheme="https://zkhdev.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库 - Teradata学习体会</title>
    <link href="https://zkhdev.github.io/2017/07/30/teradata/"/>
    <id>https://zkhdev.github.io/2017/07/30/teradata/</id>
    <published>2017-07-30T07:40:36.000Z</published>
    <updated>2018-10-12T14:57:44.192Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-3a8a8be63de67b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>随着计算机系统在处理能力、存储能力等方面，特别是计算机软件技术的不断提高，使得信息处理技术得到飞速发展。数据处理主要分为两大类：联机事物处理OLTP、联机分析处理OLAP。OLTP也就是传统的关系型数据库应用，主要功能是基本的、日常的事务处理操作，对响应时间要求非常高，是一种面向应用的生产系统。OLAP是基于数据仓库的面向主题的信息分析处理过程。<br><a id="more"></a></p><h1 id="什么是数据仓库"><a href="#什么是数据仓库" class="headerlink" title="什么是数据仓库"></a>什么是数据仓库</h1><p>数据仓库储存的是历史数据，针对数据仓库系统的查询大都非常复杂，特别消耗系统资源，对系统的可扩展能力和并行处理能力要求很高。数据仓库主要面向业务人员和管理人员，用来帮助企业管理人员作出更符合业务发展规律的决策，所以也称数据仓库为决策支持系统。数据仓库的数据来自多个数据库，并且按照预先定义好的模型对抽取的数据进行转换过滤，再将结果存放到数据仓库中。</p><h1 id="Teradata-数据库"><a href="#Teradata-数据库" class="headerlink" title="Teradata 数据库"></a>Teradata 数据库</h1><p>为了解决传统数据库在大量数据的查询分析等方面的局限性，Teradata公司推出了Teradata关系数据库管理系统。Teradata采用标准的SQL查询语言，适用于处理复杂查询数据仓库应用。   </p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Teradata的主要组件是<strong>解析引擎、BYNET和访问模块处理器（AMP）</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/5266042-ea5f11bcecc5720d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>解析引擎负责从客户端接收查询命令并制定执行计划。</li><li>BYNET相当于网络层，它从解析引擎接收执行计划并发送给相应的AMP，AMP的选择采用哈希算法实现。</li><li>数据表中的记录均匀分布在个AMP之间，每个AMP与存储数据的一组磁盘相关联。从BYNET接收数据和执行计划后，进行类型转换、聚合、过滤和排序等操作并将数据存储到与其关联的磁盘中。</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>使用Teradata提供的免费Teradata数据库开发人员版本可以进行开发测试，通过Teradata SQL Assistant或BTEQ等数据库管理工具可以对数据仓库进行操作，默认用户为DBC，SQL语法和其它数据库区别不大，但其独特的内部结构适合需要处理复杂数据查询的应用。</p><h2 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h2><p>Teradata使用了标准的SQL语法并在此基础上进行了扩展，以增强数据库管理系统的功能。所有的系统对象如Table、View、Macro等存储在数据字典中，数据字典的所有者为DBC用户，在客户端可以调用数据字典中的对象访问数据库。刚开始使用Teradata时可以使用其帮助系统提供的命令HELP、SHOW、EXPLAIN查看数据库中各种对象的结构以及SQL请求的执行过程，对理解Teradata工作原理以及各种SQL语句的使用有很大帮助。</p><h1 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h1><p>在如今快速发展的大数据革命时代，数据积累量越来越多，其中蕴含着大量重要的信息，通过对这些数据进行分析和综合处理，可以发掘出对企业发展、政府管理部门至关重要的业务信息，帮助管理人员作出合理的决策。  </p><p>当然，传统的关系型数据库也是可以完成基本的事务处理和数据分析操作的，但是当数据量非常庞大时，数据库就显得无能为力了。比如，一个早期的电商平台，只需一个网站、几台服务器、一个MySQL就可以运营了，当客户增多、数据量增大时，只需采用多台服务器、多个数据库的方式就可以勉强应付，但是随着数据量的不断增长，数据之间的关系也越来越复杂，管理人员此时关心的不是“昨天营业额是多少”这类问题，而是“哪些用户是高价值用户”、“某商品的销售量与哪些因素有关”等，这时就需要建立数据仓库了，Teradata数据仓库是专门针对决策支持系统的特点而开发的关系数据库管理系统，相对于其它商业数据库，Teradata更适合需要处理大数据量及数据分析的应用，可以极大提高应用的性能。  </p><p>数据库可以存储和处理数据，而数据仓库的职责则是发掘数据的价值，最大程度地利用数据。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/07/30/teradata/">https://zkhdev.github.io/2017/07/30/teradata/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-3a8a8be63de67b76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;随着计算机系统在处理能力、存储能力等方面，特别是计算机软件技术的不断提高，使得信息处理技术得到飞速发展。数据处理主要分为两大类：联机事物处理OLTP、联机分析处理OLAP。OLTP也就是传统的关系型数据库应用，主要功能是基本的、日常的事务处理操作，对响应时间要求非常高，是一种面向应用的生产系统。OLAP是基于数据仓库的面向主题的信息分析处理过程。&lt;br&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://zkhdev.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://zkhdev.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="数据仓库" scheme="https://zkhdev.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="teradata" scheme="https://zkhdev.github.io/tags/teradata/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式（二） 惰性模式</title>
    <link href="https://zkhdev.github.io/2017/04/26/js-lazy/"/>
    <id>https://zkhdev.github.io/2017/04/26/js-lazy/</id>
    <published>2017-04-26T00:54:18.000Z</published>
    <updated>2018-10-12T14:56:52.654Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p><p>惰性模式，可以减少代码每次执行时的重复性判断，通过重新定义对象来避免原对象中的分支判断，提高网站性能。<br><a id="more"></a><br>例如针对不同浏览器的事件注册方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AddEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">  dom.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">  dom.attachEvent(<span class="string">'on'</span>+type, fn);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  dom[<span class="string">'on'</span>+type] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面的方法可以发现，每次为元素绑定事件时，都会进行检测判断，这是多余的，因为在同一浏览器中分支判断结果是唯一的，不可能走不同的分支。</p><p>我们可以用惰性模式来解决这个问题，既然第一次调用该方法时已经判断过了，那么就可以在第一次执行时根据判断结果重新定义该方法。</p><p>惰性模式主要有两种实现方法：</p><ul><li><p>加载即执行：JavaScript文件加载时通过闭包执行对方法进行重新定义，在页面加载时会消耗一定的资源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AddEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  dom.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">    dom.attachEvent(<span class="string">'on'</span>+type, fn);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  dom[<span class="string">'on'</span>+type] = fn;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></li><li><p>惰性执行：第一次执行函数时在函数内部对其进行显示重写，最后调用重写后的方法完成第一次方法调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AddEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">  AddEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  dom.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">  AddEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">    dom.attachEvent(<span class="string">'on'</span>+type, fn);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  AddEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>)</span>&#123;</span><br><span class="line">  dom[<span class="string">'on'</span>+type] = fn;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> AddEvent(dom, type, fn);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>与<strong>加载即执行</strong>不同的是，JS文件加载完成后，<strong>惰性执行</strong>的函数还没有被重新定义，当函数被首次调用时才会被重定义。这两种惰性方式都避免了冗余的分支判断。</p><p>惰性模式的应用场景非常广泛，特别是当今浏览器种类繁多的现象，很多功能在不同浏览器中实现不一，为了兼容不同的浏览器，代码中往往会有许多对不同浏览器的分支判断，比如事件处理、XMLHttpRequest对象创建等，造成代码臃肿冗余，惰性模式正好可以解决这种问题，提高代码执行效率。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/04/26/js-lazy/">https://zkhdev.github.io/2017/04/26/js-lazy/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;惰性模式，可以减少代码每次执行时的重复性判断，通过重新定义对象来避免原对象中的分支判断，提高网站性能。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
      <category term="设计模式" scheme="https://zkhdev.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式（一） 单例模式</title>
    <link href="https://zkhdev.github.io/2017/04/22/js-single/"/>
    <id>https://zkhdev.github.io/2017/04/22/js-single/</id>
    <published>2017-04-22T02:52:42.000Z</published>
    <updated>2018-10-12T14:57:00.402Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p><p>单例模式是JavaScript中最常见的一种模式，通过这种模式可以为我们提供一个命名空间，例如jQuery库的命名空间为 jQuery 或 $ 。<br><a id="more"></a></p><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>命名空间的使用是为了让代码更加整洁，在多人协作开发的情况下，不同的人定义的变量很有可能重复，此时就需要使用命名空间来约束每个人定义的变量，使相同名称的变量放在不同的命名空间中，避免相互干扰。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A程序员的命名空间</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    css: <span class="function"><span class="keyword">function</span>(<span class="params">id,key,value</span>)</span>&#123;</span><br><span class="line">        get(id).style[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B程序员的命名空间</span></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementByClassName(className)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    css: <span class="function"><span class="keyword">function</span>(<span class="params">className,key,value</span>)</span>&#123;</span><br><span class="line">        get(className).style[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A、B两个命名空间中都有一个<code>get</code>方法和一个<code>css</code>方法，用于元素获取和元素样式修改，不同的是A是通过<code>id</code>来获取元素，而B是通过<code>class</code>来获取元素，通过命名空间，可以使这些相同名称的方法共存，使用时指定相应的命名空间即可。</p><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>JavaScript中单例模式除了定义命名空间之外，还可用于管理代码库的各个功能模块。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">google.dom.addClass             <span class="comment">// 添加元素类</span></span><br><span class="line">google.dom.append               <span class="comment">// 插入元素</span></span><br><span class="line">google.event.stopPropagation    <span class="comment">// 阻止事件冒泡</span></span><br><span class="line">google.event.preventDefault     <span class="comment">// 阻止默认行为</span></span><br><span class="line">google.string.trim              <span class="comment">// 去除字符串首尾空格</span></span><br><span class="line">google.string.encodeHTML        <span class="comment">// 将字符串进行HTML编码</span></span><br></pre></td></tr></table></figure></p><p>以上各个模块都位于google命名空间下，每个模块都有属于自己的方法，使用时只需按照需求调用特定功能模块下对应的方法即可。</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>JavaScript中并没有<code>final</code>、<code>static</code>这类关键字用来定义常量，但JavaScript非常灵活，通过常量只能访问不能修改这一特点，我们可以将变量保存在函数内部，并且只提供获取变量的方法，不提供设置变量的方法，通过闭包的方式使函数执行一次并返回相应的访问方法对象，最后将这个对象放在全局空间中作为常量单例对象使用。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Color = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="keyword">var</span> color = &#123;</span><br><span class="line">        <span class="string">'RED'</span>: <span class="string">'#ff0000'</span>,</span><br><span class="line">        <span class="string">'YELLOW'</span>: <span class="string">'#ffff00'</span>,</span><br><span class="line">        <span class="string">'BLUE'</span>: <span class="string">'#0000ff'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回访问方法对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 常量获取方法</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> color[name] ? color[name] : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = Color.get(<span class="string">'BLUE'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(color);    <span class="comment">// #0000ff</span></span><br></pre></td></tr></table></figure></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/04/22/js-single/">https://zkhdev.github.io/2017/04/22/js-single/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;单例模式是JavaScript中最常见的一种模式，通过这种模式可以为我们提供一个命名空间，例如jQuery库的命名空间为 jQuery 或 $ 。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
      <category term="设计模式" scheme="https://zkhdev.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象编程</title>
    <link href="https://zkhdev.github.io/2017/04/21/js-object/"/>
    <id>https://zkhdev.github.io/2017/04/21/js-object/</id>
    <published>2017-04-21T08:21:15.000Z</published>
    <updated>2018-10-12T14:56:56.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>面向对象编程就是将你的需求抽象成一个对象，针对这个对象分析其特征（属性）和动作（方法），这个对象称为“类”。JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP 语言能力，遗憾的是对于JavaScript这种解释性的弱类型语言，没有强类型语言中那种通过class等关键字实现类的方式，但JavaScript可以通过一些特性模仿实现面向对象编程。<br><a id="more"></a><br>面向对象有三个基本特征：<code>封装</code>、<code>继承</code>、<code>多态</code>。</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装，就是把客观事物封装成抽象的类，类中包含了事物的属性和方法，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。<br>JavaScript创建一个类很容易，通过声明一个函数保存在一个变量里来实现，这个类的类名通常会采用首字母大写的形式来表示，然后在这个函数（类）的内部使用<code>this</code>关键字来定义类的属性和方法。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name,sex,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以在类的原型上添加属性和方法。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Say something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就完成了Person类的封装，当我们要使用这个类时，需要通过<code>new</code>关键字来实例化（创建）一个新的对象，通过<code>.</code>操作符访问对象的属性和方法。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Scott'</span>,<span class="string">'male'</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);  <span class="comment">// Scott</span></span><br></pre></td></tr></table></figure></p><p>通过<code>this</code>添加的属性和方法是在当前对象上添加的，而JavaScript是一种基于原型prototype的语言，每创建一种对象时，都有一个原型prototype用于指向其继承的属性和方法，通过prototype继承的属性和方法不是属于对象本身的，在使用这些方法时，会通过原型链进行查找。当创建一个对象时，会创建this指向的属性和方法，而通过prototype继承的属性或方法是该类的每个对象所共有的，不会再次创建。</p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-b3d4da9687978acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>当创建一个函数或者对象时都会为其创建一个prototype对象，原对象中的<code>__proto__</code>属性指向该原型对象，prototype对象中会有一个<code>constructor</code>属性指向拥有整个原型对象的函数或者类。</p><p>通过<code>new</code>关键字创建对象时实际上是对新对象中<code>this</code>的不断赋值，并将prototype指向类的原型对象，而在类外通过<code>.</code>操作符定义的属性和方法是不会添加到新建对象上的，通过对象进行访问的结果是undefined。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person.isChinese = <span class="literal">true</span>;</span><br><span class="line">Person.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; … &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Alex"</span>,<span class="string">"female"</span>,<span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);    <span class="comment">// Alex</span></span><br><span class="line"><span class="built_in">console</span>.log(person.isChinese);    <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.eat());    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>如果你忽略了<code>new</code>关键字直接调用类，如：<figure class="highlight plain"><figcaption><span>person </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">要解决这个问题可以采用“**安全模式**”，例如：</span><br><span class="line">``` javascript</span><br><span class="line">var Person = function(name,sex,age)&#123;</span><br><span class="line">    if(this instanceof Person)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;else&#123;    // 未使用 new</span><br><span class="line">        return new Person(name,sex,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person = Person(&quot;Scott&quot;,&quot;male&quot;,20);</span><br></pre></td></tr></table></figure></p><p>这样就不用当心创建对象时忘记使用<code>new</code>关键字了。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。继承所涉及的对象不止一个，JavaScript并没有提供继承这一现有的机制，也正因为JavaScript少了这些显性的限制，使其更具有灵活性。在JavaScript中可以使用<strong>类式继承</strong>、<strong>构造函数继承</strong>、<strong>组合继承</strong>来达到继承的效果。</p><h2 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.parentValue = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为父类添加共有方法</span></span><br><span class="line">Parent.prototype.getParentValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.parentValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.childValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承父类</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="comment">// 为子类添加共有方法</span></span><br><span class="line">Child.prototype.getChildValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.childValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的原型对象的作用是为类的原型添加共有属性和方法，但类必须通过原型prototype来访问这些属性和方法。当实例化一个父类时，新建对象<strong>复制</strong>了父类构造函数内的属性和方法，并且将原型<code>__proto__</code>指向了父类的原型对象，这样就拥有了父类原型对象上的属性和方法，新建对象可以直接访问父类原型对象的属性和方法，接着将这个新建的对象赋值给子类的原型，那么子类的原型就可以访问父类的原型属性和方法。将这个对象赋值给子类的原型，那么这个子类就可以访问父类原型上的属性和方法，并且可以访问从父类构造函数中复制的属性和方法。我们可以来测试一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child.getParentValue());      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(child.getChildValue());       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Parent);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(child <span class="keyword">instanceof</span> Child);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Child <span class="keyword">instanceof</span> Parent);     <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>但这种继承方式有2个缺点：</p><ul><li><p>由于子类是通过其原型prototype对父类实例化，如果父类中的共有属性是<strong>引用类型</strong>，会被所有实例所共享，一个子类的实例修改了该属性会直接影响到所有实例。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.values = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child2.values);    <span class="comment">// ["A","B","C"]</span></span><br><span class="line">child1.values.push(<span class="string">'D'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child2.values);    <span class="comment">// ["A","B","C","D"]</span></span><br></pre></td></tr></table></figure></li><li><p>创建父类实例时，是无法向父类传递参数的，也就是无法对父类构造函数内的属性进行初始化。例如这种错误的继承方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent(<span class="string">'name'</span>);    <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.values = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>,name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'one'</span>);</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'two'</span>);</span><br><span class="line">child1.values.push(<span class="string">'D'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.name);   <span class="comment">// one</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.values); <span class="comment">// ["A","B","C","D"]</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.name);   <span class="comment">// two</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.values); <span class="comment">// ["A","B","C"]</span></span><br><span class="line">child1.showName();          <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>语句<code>Parent.call(this,name);</code>是构造函数继承的精华，<code>call</code>方法可以更改函数的作用环境，在子类中执行该方法相当于将子类的变量在父类中执行一遍，此时父类方法中的<code>this</code>属性指的是子类中的<code>this</code>，由于父类中是给<code>this</code>绑定属性的，所以子类也就继承了父类的属性和方法。构造函数继承并没有涉及原型prototype，所以父类的原型方法不会被子类继承，子类的每个实例会单独拥有一份父类的属性方法而不能共用，如果想被子类继承就必须放在构造函数中，要实现这样的效果可以采用<strong>组合继承</strong>的方式。    </p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>类式继承是通过子类的原型prototype对父类实例化来实现的，构造函数继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的，而组合继承则同时做到这两点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.values = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name,id</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.getId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'child1'</span>, <span class="number">1</span>);</span><br><span class="line">child1.values.push(<span class="string">'D'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.values); <span class="comment">// ["A", "B", "C", "D"]</span></span><br><span class="line">child1.getName();           <span class="comment">// child1</span></span><br><span class="line">child1.getId();             <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'child2'</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child2.values);    <span class="comment">// ["A", "B", "C"]</span></span><br><span class="line">child2.getName();              <span class="comment">// child2</span></span><br><span class="line">child2.getId();                <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>子类的实例中更改父类继承下来的引用类型属性，不会影响到其它实例，并且子类实例化过程中又能将参数传递到父类的构造函数中。</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态就是同一个方法多种调用方式，JavaScript可以通过对传入的参数列表<code>arguments</code>进行判断来实现多种调用方式。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 无参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">zero</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数列表及参数个数</span></span><br><span class="line">        <span class="keyword">var</span> arg = <span class="built_in">arguments</span>,</span><br><span class="line">            len = arg.length;</span><br><span class="line">        <span class="keyword">switch</span>(len)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> zero();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> one(arg[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> two(arg[<span class="number">0</span>], arg[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> Add();</span><br><span class="line"><span class="built_in">console</span>.log(A.add());       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(A.add(<span class="number">1</span>));      <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(A.add(<span class="number">1</span>,<span class="number">2</span>));    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>当调用add进行运算时，会根据参数列表的不同做相应的运算，这就是JavaScript的多态实现方式。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>面向对象设计方法的应用解决了传统结构化开发方法中客观世界描述工具与软件结构的不一致性问题，缩短了开发周期，解决了从分析和设计到软件模块结构之间多次转换映射的繁杂过程，是一种高效率的软件开发方式，特别是在多人协作开发的情况下，可以提高代码的可复用性和维护性，使开发更有效率。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/04/21/js-object/">https://zkhdev.github.io/2017/04/21/js-object/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-1f0d1bdc6a06f32b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;面向对象编程就是将你的需求抽象成一个对象，针对这个对象分析其特征（属性）和动作（方法），这个对象称为“类”。JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP 语言能力，遗憾的是对于JavaScript这种解释性的弱类型语言，没有强类型语言中那种通过class等关键字实现类的方式，但JavaScript可以通过一些特性模仿实现面向对象编程。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
      <category term="设计模式" scheme="https://zkhdev.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>impress.js 创建演示文档</title>
    <link href="https://zkhdev.github.io/2017/04/05/front-impressjs/"/>
    <id>https://zkhdev.github.io/2017/04/05/front-impressjs/</id>
    <published>2017-04-05T01:17:19.000Z</published>
    <updated>2018-10-12T14:56:23.218Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-ad2f163a63167dc7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>impress.js是一个基于CSS3和现代浏览器，受Prezi.com的启发而创作出来的前端多功能演示js框架，可以用它来替代PowerPoint制作更加酷炫的PPT，如果你是一位前端开发者或者勉强了解HTML和CSS，都能很快上手。<br><a id="more"></a><br>这是一个<a href="http://impress.github.io/impress.js/#/bored" target="_blank" rel="noopener">官方Demo</a>，效果不错吧。</p><p>impress.js 是基于 webkit 浏览器（Chrome、Safari）开发，在其它基于非 webkit 引擎，但支持 CSS3 3D 的浏览器也能正常运行。</p><p>impress.js源码已经发布在GitHub上，地址：<a href="https://github.com/impress/impress.js" target="_blank" rel="noopener">https://github.com/impress/impress.js</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="引入impress-js文件并初始化"><a href="#引入impress-js文件并初始化" class="headerlink" title="引入impress.js文件并初始化"></a>引入impress.js文件并初始化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"impress.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;impress().init();&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="根结点"><a href="#根结点" class="headerlink" title="根结点"></a>根结点</h2><p>impress.js需要一个id为<code>impress</code>的根元素，演示文档的所有内容都包含在该元素中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"impress"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="步骤结点"><a href="#步骤结点" class="headerlink" title="步骤结点"></a>步骤结点</h2><p>步骤元素包含将在屏幕中呈现的内容，是演示文档的基本单元，相当于一张幻灯片，每个步骤元素包含名为<code>step</code>的class<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"step"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q</span>&gt;</span>这是第一张页面<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在该元素中可以定义各种精彩呈现效果的属性，用来表示页面以怎样的方式出现到屏幕中央。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data-x = 幻灯片x坐标</span><br><span class="line">data-y = 幻灯片y坐标</span><br><span class="line">data-scale = 缩放比例</span><br><span class="line">data-rotate = 平面旋转角度</span><br><span class="line">data-rotate-x = x轴旋转角度(3D)</span><br><span class="line">data-rotate-y = y轴旋转角度(3D)</span><br><span class="line">data-rotate-z = z轴旋转角度(3D)</span><br></pre></td></tr></table></figure></p><p>现在你已经了解了基本的动画属性，可以大胆发挥你的创意创建令人惊奇的幻灯片效果。</p><h2 id="CSS-class"><a href="#CSS-class" class="headerlink" title="CSS class"></a>CSS class</h2><ul><li><strong>future</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.future</span> &#123;</span><br><span class="line">   display：none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>该类添加在还未展示的步骤结点，当该元素被导航时会自动删除<code>future</code>类，显示页面。</p><ul><li><p><strong>present</strong><br>该类会被自动添加到目前位于屏幕中央的步骤结点，这对幻灯片展示时的动画效果非常有用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.present</span> <span class="selector-class">.rotating</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-10deg);</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">0.25s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>past</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.past</span> &#123;</span><br><span class="line">   display：none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>该类会在步骤元素被导航过后自动添加。</p><ul><li><p><strong>active</strong><br>该类会被自动添加到当前的步骤元素，与<code>present</code>class类似</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.step</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.step</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>impress-on-*</strong><br>用于定义每个步骤结点的样式，步骤结点的id可以在URL中看到，如<code>#/step-1</code>，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.impress-on-overview</span> <span class="selector-class">.step</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.impress-on-step-1</span>,</span><br><span class="line"><span class="selector-class">.impress-on-step-2</span>,</span><br><span class="line"><span class="selector-class">.impress-on-step-3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: LightBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><p><strong>impress([id])</strong><br>一个用于创建<code>ImpressAPI</code>的工厂方法，可以自定义根结点，然后调用该方法进行初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> impressAPI = impress( <span class="string">"root"</span> );</span><br></pre></td></tr></table></figure></li><li><p><strong>impress().init()</strong><br>初始化impress</p></li><li><p><strong>next()</strong><br>导航到下一页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = impress();</span><br><span class="line">api.init();</span><br><span class="line">api.next();</span><br></pre></td></tr></table></figure></li><li><p><strong>prev()</strong><br>导航到上一页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = impress();</span><br><span class="line">api.init();</span><br><span class="line">api.prev();</span><br></pre></td></tr></table></figure></li><li><p><strong>goto( stepIndex | stepElementId | stepElement, [ duration ] )</strong><br>导航到特定页面</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = impress();</span><br><span class="line">api.init();</span><br><span class="line">api.goto(<span class="number">7</span>);    <span class="comment">//Number ID</span></span><br><span class="line">api.goto( <span class="string">"overview"</span> );     <span class="comment">//String ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> overview = <span class="built_in">document</span>.getElementById( <span class="string">"overview"</span> );</span><br><span class="line">api.goto( overview );   <span class="comment">//HTMLElement</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>impress.js可以让我们的演示文稿更有新意，结合CSS/JS动画，自己掌控视觉效果，比PowerPoint更加灵活精美，但是会复杂一些，如果想把演示文稿排版得更加好看，还是需要花费一定得时间和精力的。</p><p>下面是一些Demo以及在线impress制作工具：<br><a href="http://qti3e.github.io/Imprezi/#/step-1" target="_blank" rel="noopener">Imprezi</a><br><a href="http://www.strut.io/" target="_blank" rel="noopener">Strut - An HTML5 Presentation Editor</a><br><a href="http://sylvainw.github.io/HTML5-Future/#/home" target="_blank" rel="noopener">HTML5 Future : to infinity and beyond!</a><br><a href="http://jasoncosper.com/talks/wcphx/wp201/" target="_blank" rel="noopener">WordPress 201: Performance &amp; Security</a><br><a href="http://scottcheng.github.io/revolutionary-css3/#/title" target="_blank" rel="noopener">The Revolutionary CSS3: a non-technical intro to CSS3</a></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/04/05/front-impressjs/">https://zkhdev.github.io/2017/04/05/front-impressjs/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-ad2f163a63167dc7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;impress.js是一个基于CSS3和现代浏览器，受Prezi.com的启发而创作出来的前端多功能演示js框架，可以用它来替代PowerPoint制作更加酷炫的PPT，如果你是一位前端开发者或者勉强了解HTML和CSS，都能很快上手。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 - 数组与单链表快速排序(Java)</title>
    <link href="https://zkhdev.github.io/2017/03/27/algorithm-fast-array-single-linked/"/>
    <id>https://zkhdev.github.io/2017/03/27/algorithm-fast-array-single-linked/</id>
    <published>2017-03-27T04:39:00.000Z</published>
    <updated>2018-10-12T14:55:49.387Z</updated>
    
    <content type="html"><![CDATA[<p>Java实现数组与单链表快速排序<br><a id="more"></a></p><h1 id="数组快速排序"><a href="#数组快速排序" class="headerlink" title="数组快速排序"></a>数组快速排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ZONE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        Integer[] array = <span class="keyword">new</span> Integer[COUNT];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;COUNT;i++)&#123;</span><br><span class="line">            array[i] = rand.nextInt(ZONE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        quickSort(array,<span class="number">0</span>,array.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">float</span> time = (endTime - startTime) / <span class="number">1000F</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(Integer[] array,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right;</span><br><span class="line">        <span class="keyword">int</span> key = array[(i+j)/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(;i&lt;j&amp;&amp;array[j]&gt;=key;j--);</span><br><span class="line">            array[i] = array[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;j&amp;&amp;array[i]&lt;=key;i++);</span><br><span class="line">            array[j] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        array[i] = key;</span><br><span class="line">        quickSort(array,left,i-<span class="number">1</span>);</span><br><span class="line">        quickSort(array,i+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="单链表快速排序"><a href="#单链表快速排序" class="headerlink" title="单链表快速排序"></a>单链表快速排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ZONE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        Node head = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;COUNT;i++)&#123;</span><br><span class="line">            node.next = <span class="keyword">new</span> Node(rand.nextInt(ZONE));</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        quickSort(head.next);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">float</span> time = (endTime - startTime) / <span class="number">1000F</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(head=head.next;head!=<span class="keyword">null</span>;head=head.next)&#123;</span><br><span class="line">            System.out.print(head.val+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">quickSort</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        Node left = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        Node middle = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        Node right = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        Node leftHead = left;</span><br><span class="line">        Node middleHead = middle;</span><br><span class="line">        Node rightHead = right;</span><br><span class="line">        <span class="keyword">int</span> val = head.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;head!=<span class="keyword">null</span>;head=head.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val&lt;val)&#123;</span><br><span class="line">                left.next = head;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(head.val&gt;val)&#123;</span><br><span class="line">                right.next = head;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                middle.next = head;</span><br><span class="line">                middle = middle.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left.next = <span class="keyword">null</span>;</span><br><span class="line">        middle.next = <span class="keyword">null</span>;</span><br><span class="line">        right.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> merge(quickSort(leftHead.next),middleHead.next,quickSort(rightHead.next));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">merge</span><span class="params">(Node left, Node middle, Node right)</span> </span>&#123;</span><br><span class="line">        Node leftTail = findTail(left);</span><br><span class="line">        Node middleTail = findTail(middle);</span><br><span class="line">        middleTail.next = right;</span><br><span class="line">        <span class="keyword">if</span>(left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            leftTail.next = middle;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">findTail</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        Node tail = node;</span><br><span class="line">        <span class="keyword">if</span>(tail != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(tail.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/03/27/algorithm-fast-array-single-linked/">https://zkhdev.github.io/2017/03/27/algorithm-fast-array-single-linked/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java实现数组与单链表快速排序&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zkhdev.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zkhdev.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用Mock.js生成前端测试数据</title>
    <link href="https://zkhdev.github.io/2017/03/25/front-mockjs/"/>
    <id>https://zkhdev.github.io/2017/03/25/front-mockjs/</id>
    <published>2017-03-25T06:49:53.000Z</published>
    <updated>2018-10-12T14:56:26.754Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-a4fc41caaba25307.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Mock.js是一个模拟数据生成器，可以让前端独立于后端进行开发。如果你正在开发一个前端页面，可是后台还没有完成供你调用的Api，并且数据格式已经确定，那么你就可以使用Mock.js模拟相关的接口，生成假数据来查看页面效果。Mock.js的功能：生成随机数据，拦截 Ajax 请求。<a id="more"></a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li>引入mock.js和JQuery</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/jquery-1.12.4.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"http://mockjs.com/dist/mock.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>创建模拟Api，拦截Ajax请求，返回测试数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟后台</span></span><br><span class="line">Mock.mock(<span class="string">'http://api.com'</span>, &#123;</span><br><span class="line">    <span class="string">"user|5-10"</span>: [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'@cname'</span>,   <span class="comment">//中文名称</span></span><br><span class="line">        <span class="string">'age|1-100'</span>: <span class="number">100</span>,   <span class="comment">//100以内随机整数</span></span><br><span class="line">        <span class="string">'birthday'</span>: <span class="string">'@date("yyyy-MM-dd")'</span>,  <span class="comment">//日期</span></span><br><span class="line">        <span class="string">'city'</span>: <span class="string">'@city(true)'</span>   <span class="comment">//中国城市</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>发送ajax请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JQuery方式</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://api.com'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生ajax方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myajax</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">            ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ajax) &#123;</span><br><span class="line">            <span class="built_in">window</span>.alert(<span class="string">"不能创建XMLHttpRequest对象实例."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ajax.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span><br><span class="line">        ajax.send(<span class="literal">null</span>);</span><br><span class="line">        ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ajax.readyState == <span class="number">4</span> &amp;&amp; ajax.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(ajax.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">myajax(<span class="string">'http://api.com'</span>);</span><br></pre></td></tr></table></figure><ul><li>查看响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"锺丽"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">17</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1983-11-01"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"内蒙古自治区 赤峰市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"陈艳"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">25</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1973-07-10"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"河南省 驻马店市"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"冯霞"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">59</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"2010-10-28"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"澳门特别行政区 离岛"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"贾秀英"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">63</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1973-01-22"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"新疆维吾尔自治区 伊犁哈萨克自治州"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"周勇"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">34</span>,</span><br><span class="line">            <span class="attr">"birthday"</span>: <span class="string">"1985-05-21"</span>,</span><br><span class="line">            <span class="attr">"city"</span>: <span class="string">"湖南省 衡阳市"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Mock.js所能做的当然不止这些，可以结合Node、RequireJS等框架进行使用，它包含各种各样的模拟数据，可以自定义相应的规则来生成你想要的模拟数据，可以查看<a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js官网</a>，了解更多Mock命令。</p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/03/25/front-mockjs/">https://zkhdev.github.io/2017/03/25/front-mockjs/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-a4fc41caaba25307.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Mock.js是一个模拟数据生成器，可以让前端独立于后端进行开发。如果你正在开发一个前端页面，可是后台还没有完成供你调用的Api，并且数据格式已经确定，那么你就可以使用Mock.js模拟相关的接口，生成假数据来查看页面效果。Mock.js的功能：生成随机数据，拦截 Ajax 请求。
    
    </summary>
    
      <category term="前端" scheme="https://zkhdev.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://zkhdev.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://zkhdev.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>SSM之整合Redis</title>
    <link href="https://zkhdev.github.io/2017/03/22/java-ssm-redis/"/>
    <id>https://zkhdev.github.io/2017/03/22/java-ssm-redis/</id>
    <published>2017-03-22T08:37:30.000Z</published>
    <updated>2018-10-12T14:56:39.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5266042-9711235e97aa29b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><h1 id="Redis安装与使用"><a href="#Redis安装与使用" class="headerlink" title="Redis安装与使用"></a>Redis安装与使用</h1><p>第一步当然是安装Redis，这里以Windows上的安装为例。</p><ul><li>首先下载<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">Redis</a>,可以选择msi或zip包安装方式</li><li>zip方式需打开cmd窗口，在解压后的目录下运行<code>redis-server redis.windows.conf</code>启动Redis</li><li>采用msi方式安装后Redis默认启动，不需要进行任何配置</li><li>可以在<strong>redis.windows.conf</strong>文件中修改Redis端口号、密码等配置，修改完成后使用<code>redis-server redis.windows.conf</code>命令重新启动</li><li>在Redis安装目录下执行<code>redis-cli -h 127.0.0.1 -p 6379 -a 密码</code>打开Redis操作界面</li><li>如果报错<code>(error) ERR operation not permitted</code>，使用<code>auth 密码</code>进行验证</li></ul><h1 id="SSM整合Redis"><a href="#SSM整合Redis" class="headerlink" title="SSM整合Redis"></a>SSM整合Redis</h1><p>这里直接在上一篇<a href="http://www.jianshu.com/p/b6b1ec6b1816" target="_blank" rel="noopener">SSM之框架整合</a>的基础上进行Redis整合，<strong>这里需要注意，存入Redis的pojo类必须实现<code>Serializable</code>接口</strong>。</p><h2 id="配置pom-xml引入Redis依赖"><a href="#配置pom-xml引入Redis依赖" class="headerlink" title="配置pom.xml引入Redis依赖"></a>配置pom.xml引入Redis依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="redis-properties"><a href="#redis-properties" class="headerlink" title="redis.properties"></a>redis.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis.host=127.0.0.1</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.password=redis</span><br><span class="line">redis.maxIdle=100</span><br><span class="line">redis.maxWait=1000</span><br><span class="line">redis.testOnBorrow=true</span><br><span class="line">redis.timeout=100000</span><br><span class="line">defaultCacheExpireTime=3600</span><br></pre></td></tr></table></figure><h2 id="applicationContext-redis-xml"><a href="#applicationContext-redis-xml" class="headerlink" title="applicationContext-redis.xml"></a>applicationContext-redis.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入Redis配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jedis 连接池配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWait&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redis连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.host&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.timeout&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存拦截器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"methodCacheInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zkh.interceptor.MethodCacheInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redisUtil"</span> <span class="attr">ref</span>=<span class="string">"redisUtil"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultCacheExpireTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;defaultCacheExpireTime&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 禁用缓存的类名列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetNamesList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 禁用缓存的方法名列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"methodNamesList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisUtil"</span> <span class="attr">class</span>=<span class="string">"com.zkh.util.RedisUtil"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redisTemplate"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面拦截方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"controllerMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        execution(* com.zkh.service.impl.*.select*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"methodCacheInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"controllerMethodPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MethodCacheInterceptor-java"><a href="#MethodCacheInterceptor-java" class="headerlink" title="MethodCacheInterceptor.java"></a>MethodCacheInterceptor.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zkh.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zkh.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis缓存过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodCacheInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; targetNamesList; <span class="comment">// 禁用缓存的类名列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; methodNamesList; <span class="comment">// 禁用缓存的方法列表</span></span><br><span class="line">    <span class="keyword">private</span> String defaultCacheExpireTime; <span class="comment">// 缓存默认的过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String targetName = invocation.getThis().getClass().getName();</span><br><span class="line">        String methodName = invocation.getMethod().getName();</span><br><span class="line">        <span class="keyword">if</span> (!isAddCache(targetName, methodName)) &#123;</span><br><span class="line">            <span class="comment">// 跳过缓存返回结果</span></span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] arguments = invocation.getArguments();</span><br><span class="line">        String key = getCacheKey(targetName, methodName, arguments);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是否有缓存</span></span><br><span class="line">            <span class="keyword">if</span> (redisUtil.exists(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> redisUtil.get(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 写入缓存</span></span><br><span class="line">            value = invocation.proceed();</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String tkey = key;</span><br><span class="line">                <span class="keyword">final</span> Object tvalue = value;</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        redisUtil.set(tkey, tvalue, Long.parseLong(defaultCacheExpireTime));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否加入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAddCache</span><span class="params">(String targetName, String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (targetNamesList.contains(targetName)</span><br><span class="line">                || methodNamesList.contains(methodName) || targetName.contains(<span class="string">"$$EnhancerBySpringCGLIB$$"</span>)) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建缓存key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCacheKey</span><span class="params">(String targetName, String methodName,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Object[] arguments)</span> </span>&#123;</span><br><span class="line">        StringBuffer sbu = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sbu.append(targetName).append(<span class="string">"_"</span>).append(methodName);</span><br><span class="line">        <span class="keyword">if</span> ((arguments != <span class="keyword">null</span>) &amp;&amp; (arguments.length != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arguments.length; i++) &#123;</span><br><span class="line">                sbu.append(<span class="string">"_"</span>).append(arguments[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sbu.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisUtil</span><span class="params">(RedisUtil redisUtil)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisUtil = redisUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetNamesList</span><span class="params">(List&lt;String&gt; targetNamesList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetNamesList = targetNamesList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethodNamesList</span><span class="params">(List&lt;String&gt; methodNamesList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.methodNamesList = methodNamesList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultCacheExpireTime</span><span class="params">(String defaultCacheExpireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultCacheExpireTime = defaultCacheExpireTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RedisUtil-java-工具类"><a href="#RedisUtil-java-工具类" class="headerlink" title="RedisUtil.java 工具类"></a>RedisUtil.java 工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zkh.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Serializable, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePattern</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class="line">        <span class="keyword">if</span> (keys.size() &gt; <span class="number">0</span>)</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否有对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate</span><br><span class="line">                .opsForValue();</span><br><span class="line">        result = operations.get(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate</span><br><span class="line">                    .opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value, Long expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate</span><br><span class="line">                    .opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            RedisTemplate&lt;Serializable, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="http://upload-images.jianshu.io/upload_images/5266042-ab1bb869a8ca0452.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>刚开始Redis中没有任何记录，接下来访问一下第一页记录</p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-b7dd0e972f21fdba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>再查看缓存，记录已经存如Redis，并且第一次访问会从Mysql中读取数据</p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-9e4aaa797974d4e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-bd3868f9c894c580.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>按<code>F5</code>刷新页面，从Tomcat控制台可以看到没有进行SQL查询，而是直接从Redis中读取缓存数据，减轻了数据库的负担</p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-9afea7303c4588ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5266042-5974109c8ee81850.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>具体代码已发布在Github上，地址：<a href="https://github.com/ZKHDEV/SSM" target="_blank" rel="noopener">SSM</a></p><blockquote><p>本文为作者<a href="https://zkhdev.github.io/">kMacro</a>原创，转载请注明来源：<a href="https://zkhdev.github.io/2017/03/22/java-ssm-redis/">https://zkhdev.github.io/2017/03/22/java-ssm-redis/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5266042-9711235e97aa29b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zkhdev.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://zkhdev.github.io/tags/java/"/>
    
      <category term="ssm" scheme="https://zkhdev.github.io/tags/ssm/"/>
    
      <category term="redis" scheme="https://zkhdev.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
